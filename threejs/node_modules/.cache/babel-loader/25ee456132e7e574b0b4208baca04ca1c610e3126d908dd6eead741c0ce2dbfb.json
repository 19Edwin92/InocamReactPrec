{"ast":null,"code":"// Original src: https://github.com/zz85/threejs-path-flow\nconst CHANNELS = 4;\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 4;\nimport { DataTexture, RGBAFormat, FloatType, RepeatWrapping, Mesh, InstancedMesh, NearestFilter, DynamicDrawUsage, Matrix4 } from 'three';\n\n/**\n * Make a new DataTexture to store the descriptions of the curves.\n *\n * @param { number } numberOfCurves the number of curves needed to be described by this texture.\n */\nexport function initSplineTexture() {\n  let numberOfCurves = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  const dataArray = new Float32Array(TEXTURE_WIDTH * TEXTURE_HEIGHT * numberOfCurves * CHANNELS);\n  const dataTexture = new DataTexture(dataArray, TEXTURE_WIDTH, TEXTURE_HEIGHT * numberOfCurves, RGBAFormat, FloatType);\n  dataTexture.wrapS = RepeatWrapping;\n  dataTexture.wrapY = RepeatWrapping;\n  dataTexture.magFilter = NearestFilter;\n  dataTexture.needsUpdate = true;\n  return dataTexture;\n}\n\n/**\n * Write the curve description to the data texture\n *\n * @param { DataTexture } texture The DataTexture to write to\n * @param { Curve } splineCurve The curve to describe\n * @param { number } offset Which curve slot to write to\n */\nexport function updateSplineTexture(texture, splineCurve) {\n  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const numberOfPoints = Math.floor(TEXTURE_WIDTH * (TEXTURE_HEIGHT / 4));\n  splineCurve.arcLengthDivisions = numberOfPoints / 2;\n  splineCurve.updateArcLengths();\n  const points = splineCurve.getSpacedPoints(numberOfPoints);\n  const frenetFrames = splineCurve.computeFrenetFrames(numberOfPoints, true);\n  for (let i = 0; i < numberOfPoints; i++) {\n    const rowOffset = Math.floor(i / TEXTURE_WIDTH);\n    const rowIndex = i % TEXTURE_WIDTH;\n    let pt = points[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 0 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.tangents[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 1 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.normals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 2 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.binormals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 3 + rowOffset + TEXTURE_HEIGHT * offset);\n  }\n  texture.needsUpdate = true;\n}\nfunction setTextureValue(texture, index, x, y, z, o) {\n  const image = texture.image;\n  const {\n    data\n  } = image;\n  const i = CHANNELS * TEXTURE_WIDTH * o; // Row Offset\n  data[index * CHANNELS + i + 0] = x;\n  data[index * CHANNELS + i + 1] = y;\n  data[index * CHANNELS + i + 2] = z;\n  data[index * CHANNELS + i + 3] = 1;\n}\n\n/**\n * Create a new set of uniforms for describing the curve modifier\n *\n * @param { DataTexture } Texture which holds the curve description\n */\nexport function getUniforms(splineTexture) {\n  const uniforms = {\n    spineTexture: {\n      value: splineTexture\n    },\n    pathOffset: {\n      type: 'f',\n      value: 0\n    },\n    // time of path curve\n    pathSegment: {\n      type: 'f',\n      value: 1\n    },\n    // fractional length of path\n    spineOffset: {\n      type: 'f',\n      value: 161\n    },\n    spineLength: {\n      type: 'f',\n      value: 400\n    },\n    flow: {\n      type: 'i',\n      value: 1\n    }\n  };\n  return uniforms;\n}\nexport function modifyShader(material, uniforms) {\n  let numberOfCurves = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (material.__ok) return;\n  material.__ok = true;\n  material.onBeforeCompile = shader => {\n    if (shader.__modified) return;\n    shader.__modified = true;\n    Object.assign(shader.uniforms, uniforms);\n    const vertexShader = `\n\t\tuniform sampler2D spineTexture;\n\t\tuniform float pathOffset;\n\t\tuniform float pathSegment;\n\t\tuniform float spineOffset;\n\t\tuniform float spineLength;\n\t\tuniform int flow;\n\n\t\tfloat textureLayers = ${TEXTURE_HEIGHT * numberOfCurves}.;\n\t\tfloat textureStacks = ${TEXTURE_HEIGHT / 4}.;\n\n\t\t${shader.vertexShader}\n\t\t`\n    // chunk import moved in front of modified shader below\n    .replace('#include <beginnormal_vertex>', '')\n\n    // vec3 transformedNormal declaration overriden below\n    .replace('#include <defaultnormal_vertex>', '')\n\n    // vec3 transformed declaration overriden below\n    .replace('#include <begin_vertex>', '')\n\n    // shader override\n    .replace(/void\\s*main\\s*\\(\\)\\s*\\{/, `\nvoid main() {\n#include <beginnormal_vertex>\n\nvec4 worldPos = modelMatrix * vec4(position, 1.);\n\nbool bend = flow > 0;\nfloat xWeight = bend ? 0. : 1.;\n\n#ifdef USE_INSTANCING\nfloat pathOffsetFromInstanceMatrix = instanceMatrix[3][2];\nfloat spineLengthFromInstanceMatrix = instanceMatrix[3][0];\nfloat spinePortion = bend ? (worldPos.x + spineOffset) / spineLengthFromInstanceMatrix : 0.;\nfloat mt = (spinePortion * pathSegment + pathOffset + pathOffsetFromInstanceMatrix)*textureStacks;\n#else\nfloat spinePortion = bend ? (worldPos.x + spineOffset) / spineLength : 0.;\nfloat mt = (spinePortion * pathSegment + pathOffset)*textureStacks;\n#endif\n\nmt = mod(mt, textureStacks);\nfloat rowOffset = floor(mt);\n\n#ifdef USE_INSTANCING\nrowOffset += instanceMatrix[3][1] * ${TEXTURE_HEIGHT}.;\n#endif\n\nvec3 spinePos = texture2D(spineTexture, vec2(mt, (0. + rowOffset + 0.5) / textureLayers)).xyz;\nvec3 a =        texture2D(spineTexture, vec2(mt, (1. + rowOffset + 0.5) / textureLayers)).xyz;\nvec3 b =        texture2D(spineTexture, vec2(mt, (2. + rowOffset + 0.5) / textureLayers)).xyz;\nvec3 c =        texture2D(spineTexture, vec2(mt, (3. + rowOffset + 0.5) / textureLayers)).xyz;\nmat3 basis = mat3(a, b, c);\n\nvec3 transformed = basis\n\t* vec3(worldPos.x * xWeight, worldPos.y * 1., worldPos.z * 1.)\n\t+ spinePos;\n\nvec3 transformedNormal = normalMatrix * (basis * objectNormal);\n\t\t\t`).replace('#include <project_vertex>', `vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;`);\n    shader.vertexShader = vertexShader;\n  };\n}\n\n/**\n * A helper class for making meshes bend aroudn curves\n */\nexport class Flow {\n  /**\n   * @param {Mesh} mesh The mesh to clone and modify to bend around the curve\n   * @param {number} numberOfCurves The amount of space that should preallocated for additional curves\n   */\n  constructor(mesh) {\n    let numberOfCurves = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const obj3D = mesh.clone();\n    const splineTexure = initSplineTexture(numberOfCurves);\n    const uniforms = getUniforms(splineTexure);\n    obj3D.traverse(function (child) {\n      if (child instanceof Mesh || child instanceof InstancedMesh) {\n        child.material = child.material.clone();\n        modifyShader(child.material, uniforms, numberOfCurves);\n      }\n    });\n    this.curveArray = new Array(numberOfCurves);\n    this.curveLengthArray = new Array(numberOfCurves);\n    this.object3D = obj3D;\n    this.splineTexure = splineTexure;\n    this.uniforms = uniforms;\n  }\n  updateCurve(index, curve) {\n    if (index >= this.curveArray.length) throw Error('Index out of range for Flow');\n    const curveLength = curve.getLength();\n    this.uniforms.spineLength.value = curveLength;\n    this.curveLengthArray[index] = curveLength;\n    this.curveArray[index] = curve;\n    updateSplineTexture(this.splineTexure, curve, index);\n  }\n  moveAlongCurve(amount) {\n    this.uniforms.pathOffset.value += amount;\n  }\n}\nconst matrix = new Matrix4();\n\n/**\n * A helper class for creating instanced versions of flow, where the instances are placed on the curve.\n */\nexport class InstancedFlow extends Flow {\n  /**\n   *\n   * @param {number} count The number of instanced elements\n   * @param {number} curveCount The number of curves to preallocate for\n   * @param {Geometry} geometry The geometry to use for the instanced mesh\n   * @param {Material} material The material to use for the instanced mesh\n   */\n  constructor(count, curveCount, geometry, material) {\n    const mesh = new InstancedMesh(geometry, material, count);\n    mesh.instanceMatrix.setUsage(DynamicDrawUsage);\n    mesh.frustumCulled = false;\n    super(mesh, curveCount);\n    this.offsets = new Array(count).fill(0);\n    this.whichCurve = new Array(count).fill(0);\n  }\n\n  /**\n   * The extra information about which curve and curve position is stored in the translation components of the matrix for the instanced objects\n   * This writes that information to the matrix and marks it as needing update.\n   *\n   * @param {number} index of the instanced element to update\n   */\n  writeChanges(index) {\n    matrix.makeTranslation(this.curveLengthArray[this.whichCurve[index]], this.whichCurve[index], this.offsets[index]);\n    this.object3D.setMatrixAt(index, matrix);\n    this.object3D.instanceMatrix.needsUpdate = true;\n  }\n\n  /**\n   * Move an individual element along the curve by a specific amount\n   *\n   * @param {number} index Which element to update\n   * @param {number} offset Move by how much\n   */\n  moveIndividualAlongCurve(index, offset) {\n    this.offsets[index] += offset;\n    this.writeChanges(index);\n  }\n\n  /**\n   * Select which curve to use for an element\n   *\n   * @param {number} index the index of the instanced element to update\n   * @param {number} curveNo the index of the curve it should use\n   */\n  setCurve(index, curveNo) {\n    if (isNaN(curveNo)) throw Error('curve index being set is Not a Number (NaN)');\n    this.whichCurve[index] = curveNo;\n    this.writeChanges(index);\n  }\n}","map":{"version":3,"names":["CHANNELS","TEXTURE_WIDTH","TEXTURE_HEIGHT","DataTexture","RGBAFormat","FloatType","RepeatWrapping","Mesh","InstancedMesh","NearestFilter","DynamicDrawUsage","Matrix4","initSplineTexture","numberOfCurves","arguments","length","undefined","dataArray","Float32Array","dataTexture","wrapS","wrapY","magFilter","needsUpdate","updateSplineTexture","texture","splineCurve","offset","numberOfPoints","Math","floor","arcLengthDivisions","updateArcLengths","points","getSpacedPoints","frenetFrames","computeFrenetFrames","i","rowOffset","rowIndex","pt","setTextureValue","x","y","z","tangents","normals","binormals","index","o","image","data","getUniforms","splineTexture","uniforms","spineTexture","value","pathOffset","type","pathSegment","spineOffset","spineLength","flow","modifyShader","material","__ok","onBeforeCompile","shader","__modified","Object","assign","vertexShader","replace","Flow","constructor","mesh","obj3D","clone","splineTexure","traverse","child","curveArray","Array","curveLengthArray","object3D","updateCurve","curve","Error","curveLength","getLength","moveAlongCurve","amount","matrix","InstancedFlow","count","curveCount","geometry","instanceMatrix","setUsage","frustumCulled","offsets","fill","whichCurve","writeChanges","makeTranslation","setMatrixAt","moveIndividualAlongCurve","setCurve","curveNo","isNaN"],"sources":["/Users/edwin.youngchan.park/Documents/sparta/inocamp/03주특기/InocamReactPrec/threejs/node_modules/three/examples/jsm/modifiers/CurveModifier.js"],"sourcesContent":["// Original src: https://github.com/zz85/threejs-path-flow\nconst CHANNELS = 4;\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 4;\n\nimport {\n\tDataTexture,\n\tRGBAFormat,\n\tFloatType,\n\tRepeatWrapping,\n\tMesh,\n\tInstancedMesh,\n\tNearestFilter,\n\tDynamicDrawUsage,\n\tMatrix4\n} from 'three';\n\n/**\n * Make a new DataTexture to store the descriptions of the curves.\n *\n * @param { number } numberOfCurves the number of curves needed to be described by this texture.\n */\nexport function initSplineTexture( numberOfCurves = 1 ) {\n\n\tconst dataArray = new Float32Array( TEXTURE_WIDTH * TEXTURE_HEIGHT * numberOfCurves * CHANNELS );\n\tconst dataTexture = new DataTexture(\n\t\tdataArray,\n\t\tTEXTURE_WIDTH,\n\t\tTEXTURE_HEIGHT * numberOfCurves,\n\t\tRGBAFormat,\n\t\tFloatType\n\t);\n\n\tdataTexture.wrapS = RepeatWrapping;\n\tdataTexture.wrapY = RepeatWrapping;\n\tdataTexture.magFilter = NearestFilter;\n\tdataTexture.needsUpdate = true;\n\n\treturn dataTexture;\n\n}\n\n/**\n * Write the curve description to the data texture\n *\n * @param { DataTexture } texture The DataTexture to write to\n * @param { Curve } splineCurve The curve to describe\n * @param { number } offset Which curve slot to write to\n */\nexport function updateSplineTexture( texture, splineCurve, offset = 0 ) {\n\n\tconst numberOfPoints = Math.floor( TEXTURE_WIDTH * ( TEXTURE_HEIGHT / 4 ) );\n\tsplineCurve.arcLengthDivisions = numberOfPoints / 2;\n\tsplineCurve.updateArcLengths();\n\tconst points = splineCurve.getSpacedPoints( numberOfPoints );\n\tconst frenetFrames = splineCurve.computeFrenetFrames( numberOfPoints, true );\n\n\tfor ( let i = 0; i < numberOfPoints; i ++ ) {\n\n\t\tconst rowOffset = Math.floor( i / TEXTURE_WIDTH );\n\t\tconst rowIndex = i % TEXTURE_WIDTH;\n\n\t\tlet pt = points[ i ];\n\t\tsetTextureValue( texture, rowIndex, pt.x, pt.y, pt.z, 0 + rowOffset + ( TEXTURE_HEIGHT * offset ) );\n\t\tpt = frenetFrames.tangents[ i ];\n\t\tsetTextureValue( texture, rowIndex, pt.x, pt.y, pt.z, 1 + rowOffset + ( TEXTURE_HEIGHT * offset ) );\n\t\tpt = frenetFrames.normals[ i ];\n\t\tsetTextureValue( texture, rowIndex, pt.x, pt.y, pt.z, 2 + rowOffset + ( TEXTURE_HEIGHT * offset ) );\n\t\tpt = frenetFrames.binormals[ i ];\n\t\tsetTextureValue( texture, rowIndex, pt.x, pt.y, pt.z, 3 + rowOffset + ( TEXTURE_HEIGHT * offset ) );\n\n\t}\n\n\ttexture.needsUpdate = true;\n\n}\n\n\nfunction setTextureValue( texture, index, x, y, z, o ) {\n\n\tconst image = texture.image;\n\tconst { data } = image;\n\tconst i = CHANNELS * TEXTURE_WIDTH * o; // Row Offset\n\tdata[ index * CHANNELS + i + 0 ] = x;\n\tdata[ index * CHANNELS + i + 1 ] = y;\n\tdata[ index * CHANNELS + i + 2 ] = z;\n\tdata[ index * CHANNELS + i + 3 ] = 1;\n\n}\n\n/**\n * Create a new set of uniforms for describing the curve modifier\n *\n * @param { DataTexture } Texture which holds the curve description\n */\nexport function getUniforms( splineTexture ) {\n\n\tconst uniforms = {\n\t\tspineTexture: { value: splineTexture },\n\t\tpathOffset: { type: 'f', value: 0 }, // time of path curve\n\t\tpathSegment: { type: 'f', value: 1 }, // fractional length of path\n\t\tspineOffset: { type: 'f', value: 161 },\n\t\tspineLength: { type: 'f', value: 400 },\n\t\tflow: { type: 'i', value: 1 },\n\t};\n\treturn uniforms;\n\n}\n\nexport function modifyShader( material, uniforms, numberOfCurves = 1 ) {\n\n\tif ( material.__ok ) return;\n\tmaterial.__ok = true;\n\n\tmaterial.onBeforeCompile = ( shader ) => {\n\n\t\tif ( shader.__modified ) return;\n\t\tshader.__modified = true;\n\n\t\tObject.assign( shader.uniforms, uniforms );\n\n\t\tconst vertexShader = `\n\t\tuniform sampler2D spineTexture;\n\t\tuniform float pathOffset;\n\t\tuniform float pathSegment;\n\t\tuniform float spineOffset;\n\t\tuniform float spineLength;\n\t\tuniform int flow;\n\n\t\tfloat textureLayers = ${TEXTURE_HEIGHT * numberOfCurves}.;\n\t\tfloat textureStacks = ${TEXTURE_HEIGHT / 4}.;\n\n\t\t${shader.vertexShader}\n\t\t`\n\t\t// chunk import moved in front of modified shader below\n\t\t\t.replace( '#include <beginnormal_vertex>', '' )\n\n\t\t\t// vec3 transformedNormal declaration overriden below\n\t\t\t.replace( '#include <defaultnormal_vertex>', '' )\n\n\t\t\t// vec3 transformed declaration overriden below\n\t\t\t.replace( '#include <begin_vertex>', '' )\n\n\t\t\t// shader override\n\t\t\t.replace(\n\t\t\t\t/void\\s*main\\s*\\(\\)\\s*\\{/,\n\t\t\t\t`\nvoid main() {\n#include <beginnormal_vertex>\n\nvec4 worldPos = modelMatrix * vec4(position, 1.);\n\nbool bend = flow > 0;\nfloat xWeight = bend ? 0. : 1.;\n\n#ifdef USE_INSTANCING\nfloat pathOffsetFromInstanceMatrix = instanceMatrix[3][2];\nfloat spineLengthFromInstanceMatrix = instanceMatrix[3][0];\nfloat spinePortion = bend ? (worldPos.x + spineOffset) / spineLengthFromInstanceMatrix : 0.;\nfloat mt = (spinePortion * pathSegment + pathOffset + pathOffsetFromInstanceMatrix)*textureStacks;\n#else\nfloat spinePortion = bend ? (worldPos.x + spineOffset) / spineLength : 0.;\nfloat mt = (spinePortion * pathSegment + pathOffset)*textureStacks;\n#endif\n\nmt = mod(mt, textureStacks);\nfloat rowOffset = floor(mt);\n\n#ifdef USE_INSTANCING\nrowOffset += instanceMatrix[3][1] * ${TEXTURE_HEIGHT}.;\n#endif\n\nvec3 spinePos = texture2D(spineTexture, vec2(mt, (0. + rowOffset + 0.5) / textureLayers)).xyz;\nvec3 a =        texture2D(spineTexture, vec2(mt, (1. + rowOffset + 0.5) / textureLayers)).xyz;\nvec3 b =        texture2D(spineTexture, vec2(mt, (2. + rowOffset + 0.5) / textureLayers)).xyz;\nvec3 c =        texture2D(spineTexture, vec2(mt, (3. + rowOffset + 0.5) / textureLayers)).xyz;\nmat3 basis = mat3(a, b, c);\n\nvec3 transformed = basis\n\t* vec3(worldPos.x * xWeight, worldPos.y * 1., worldPos.z * 1.)\n\t+ spinePos;\n\nvec3 transformedNormal = normalMatrix * (basis * objectNormal);\n\t\t\t` ).replace(\n\t\t\t\t'#include <project_vertex>',\n\t\t\t\t`vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;`\n\t\t\t);\n\n\t\tshader.vertexShader = vertexShader;\n\n\t};\n\n}\n\n/**\n * A helper class for making meshes bend aroudn curves\n */\nexport class Flow {\n\n\t/**\n\t * @param {Mesh} mesh The mesh to clone and modify to bend around the curve\n\t * @param {number} numberOfCurves The amount of space that should preallocated for additional curves\n\t */\n\tconstructor( mesh, numberOfCurves = 1 ) {\n\n\t\tconst obj3D = mesh.clone();\n\t\tconst splineTexure = initSplineTexture( numberOfCurves );\n\t\tconst uniforms = getUniforms( splineTexure );\n\t\tobj3D.traverse( function ( child ) {\n\n\t\t\tif (\n\t\t\t\tchild instanceof Mesh ||\n\t\t\t\tchild instanceof InstancedMesh\n\t\t\t) {\n\n\t\t\t\tchild.material = child.material.clone();\n\t\t\t\tmodifyShader( child.material, uniforms, numberOfCurves );\n\n\t\t\t}\n\n\t\t} );\n\n\t\tthis.curveArray = new Array( numberOfCurves );\n\t\tthis.curveLengthArray = new Array( numberOfCurves );\n\n\t\tthis.object3D = obj3D;\n\t\tthis.splineTexure = splineTexure;\n\t\tthis.uniforms = uniforms;\n\n\t}\n\n\tupdateCurve( index, curve ) {\n\n\t\tif ( index >= this.curveArray.length ) throw Error( 'Index out of range for Flow' );\n\t\tconst curveLength = curve.getLength();\n\t\tthis.uniforms.spineLength.value = curveLength;\n\t\tthis.curveLengthArray[ index ] = curveLength;\n\t\tthis.curveArray[ index ] = curve;\n\t\tupdateSplineTexture( this.splineTexure, curve, index );\n\n\t}\n\n\tmoveAlongCurve( amount ) {\n\n\t\tthis.uniforms.pathOffset.value += amount;\n\n\t}\n\n}\nconst matrix = new Matrix4();\n\n/**\n * A helper class for creating instanced versions of flow, where the instances are placed on the curve.\n */\nexport class InstancedFlow extends Flow {\n\n\t/**\n\t *\n\t * @param {number} count The number of instanced elements\n\t * @param {number} curveCount The number of curves to preallocate for\n\t * @param {Geometry} geometry The geometry to use for the instanced mesh\n\t * @param {Material} material The material to use for the instanced mesh\n\t */\n\tconstructor( count, curveCount, geometry, material ) {\n\n\t\tconst mesh = new InstancedMesh(\n\t\t\tgeometry,\n\t\t\tmaterial,\n\t\t\tcount\n\t\t);\n\t\tmesh.instanceMatrix.setUsage( DynamicDrawUsage );\n\t\tmesh.frustumCulled = false;\n\t\tsuper( mesh, curveCount );\n\n\t\tthis.offsets = new Array( count ).fill( 0 );\n\t\tthis.whichCurve = new Array( count ).fill( 0 );\n\n\t}\n\n\t/**\n\t * The extra information about which curve and curve position is stored in the translation components of the matrix for the instanced objects\n\t * This writes that information to the matrix and marks it as needing update.\n\t *\n\t * @param {number} index of the instanced element to update\n\t */\n\twriteChanges( index ) {\n\n\t\tmatrix.makeTranslation(\n\t\t\tthis.curveLengthArray[ this.whichCurve[ index ] ],\n\t\t\tthis.whichCurve[ index ],\n\t\t\tthis.offsets[ index ]\n\t\t);\n\t\tthis.object3D.setMatrixAt( index, matrix );\n\t\tthis.object3D.instanceMatrix.needsUpdate = true;\n\n\t}\n\n\t/**\n\t * Move an individual element along the curve by a specific amount\n\t *\n\t * @param {number} index Which element to update\n\t * @param {number} offset Move by how much\n\t */\n\tmoveIndividualAlongCurve( index, offset ) {\n\n\t\tthis.offsets[ index ] += offset;\n\t\tthis.writeChanges( index );\n\n\t}\n\n\t/**\n\t * Select which curve to use for an element\n\t *\n\t * @param {number} index the index of the instanced element to update\n\t * @param {number} curveNo the index of the curve it should use\n\t */\n\tsetCurve( index, curveNo ) {\n\n\t\tif ( isNaN( curveNo ) ) throw Error( 'curve index being set is Not a Number (NaN)' );\n\t\tthis.whichCurve[ index ] = curveNo;\n\t\tthis.writeChanges( index );\n\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}