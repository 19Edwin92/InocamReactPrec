{"ast":null,"code":"var _jsxFileName = \"/Users/edwin.youngchan.park/Documents/sparta/inocamp/03\\u110C\\u116E\\u1110\\u1173\\u11A8\\u1100\\u1175/InocamReactPrec/threejs/src/App.js\";\nimport React from \"react\";\nimport { GlobalStyle, Layout } from \"./styled\";\nimport { Canvas } from \"@react-three/fiber\";\n// import { Box } from '@react-three/drei'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n        children: [/*#__PURE__*/_jsxDEV(Geometry, {\n          attach: \"geometry\",\n          args: [1, 1, 1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n          attach: \"material\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\n\n/*\n  <Canvas> 내부에는 다음의 요소만을 사용할 수 있다 Mesh, BufferGeometry, Material\n  기타, HTML 태그들은 <Canvas> 외부에서 선언해야 한다. \n\n  Three.js 맥락에서 Mesh, BufferGeometry 및 Material은 3D 그래칙을 렌더링 하는 데 사용되는 기본 구성 요소로\n\n  Mesh : \n  \" 형상과 재질을 결합한 3D 개체를 \"\n  3D 모델을 나타내는 객체로, 형성과 재료를 결합하여 모델의 시각적 모양과 속성을 정의한다. \n  형상은 모델의 모양과 구조를 정의하고, 재료는 모델의 표면이 빛과 상호 작용하는 방식을 정의한다. \n  메시는 geometry와 material 지정하여 생성하고, 형상은 정육면체, 구 또는 원통과 같은 미리 정의된 모양이거나 꼭지점과 면을 사용하여 정의된 사용자 지정 형상일 수 있습니다. \n\n  메시가 생성되면 장면에 추가하고 Three.js의 렌더러를 사용하여 렌더링할 수 있다. \n  즉 메시는 위치, 회전 및 배율을 조작하여 원하는 변형 및 애니메이션은 얻는다. \n\n  [ 강의 ](https://www.youtube.com/watch?v=fdtqqyeKRJk)\n  <boxBufferGeometry> >> \" boxGeometry \"\n  1) attach : Three.js 개체의 특정부분에 연결하는데 사용한다. 지오메트리를 부탁하면 객체의 일부가 되어 모양을 정의한다. \n\n  <mesh>\n    <boxGeometry \n      attach=\"geometry\" \n      args={[1, 1, 1]} />\n    <meshStandardMaterial attach=\"material\" />\n  </mesh>\n\n  위의 코드는 @react-three/drei 의 <Box> 태그로 쉽게 구현할 수 있는데, @react-three/drei 와 drei 라이브러리를 같이 사용할 경우 둘다 다운 받아야 하는 것 같다. \n\n  <Box children={<meshStandardMaterial attach=\"material\" />}/>\n\n\n  BufferGeometry :\n  \" 효율적인 렌더링을 위해 셩상 데이터의 최적화된 표현을 제공 \"\n  BufferGeometry는 Three.js에서 기하학 데이터의 최적화된 표현으로, 지오메트리 형식에 비해 많은 양의 지오메트리를 렌더링하는 데 더 효율적이다. \n  정점, 면, 법선 및 UV 좌표와 같은 기하학적 데이터는 일반적으로 JS 배열에 저장된다. \n  BufferGeometry는 이러한 배열을 가져와 렌더링을 위해 GPU에서 직접 사용할 수 있는 저수준 버퍼로 변환한다. \n\n  Material :\n  \" 색상, 질감 및 음영과 같은 개체 표현의 시각적 속성을 정의 \"\n  Three.js 에서 객체 표면의 시각적 속성을 정의합니다. \n  빛이 개체와 상호 작용하는 방식을 결정하여 개체가 음영 처리되는 방식과 해당 색상 및 질감이 표시되는 방식에 영향을 미칩니다. \n  재료는 색상, 방출 색상, 불투명도, 투명도, 광택, 거칠기, 금속성 등과 같은 속성을 가질 수 있습니다.\n  또한 확산 맵, 반사 맵, 일반 맵 및 변위 맵과 같은 보다 사실적인 렌더링을 위해 텍스처를 통합할 수 있습니다.\n\n*/\n\n// import React, { useState } from \"react\";\n// import { Canvas, useFrame } from \"@react-three/fiber\";\n// import { OrbitControls } from '@react-three/drei';\n\n// function App() {\n\n//   return (\n//     <div>\n//       <h1>Three.js 다뤄보기</h1>\n//       <Canvas>\n//       <OrbitControls autoRotate={true}/>\n//         <mesh>\n//           <ambientLight intensity={1} />\n//           <directionalLight position={[-1,0,1]}  intensity={0.8} />\n//           <boxGeometry args={[5, 3, 3]} />\n//           <meshStandardMaterial attach=\"material\" color=\"blue\"/>\n//         </mesh>\n//       </Canvas>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// function MyRotatingBox ()  {\n//   const myMesh = React.useRef();\n//   const [active, setActive] = useState(false);\n//   useFrame(({ clock }) => {\n//     const a = clock.getElapsedTime();\n//     myMesh.current.rotation.x = a;\n//   });\n//   return (\n//     <mesh\n//     scale={active ? 1.5 : 1}\n//     onClick={()=> setActive(!active)}\n//     ref={myMesh}\n//   >\n//     <boxGeometry />\n//     <meshStandardMaterial color=\"orange\"/>\n//   </mesh>\n//   )\n// }\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","GlobalStyle","Layout","Canvas","jsxDEV","_jsxDEV","App","children","fileName","_jsxFileName","lineNumber","columnNumber","Geometry","attach","args","_c","$RefreshReg$"],"sources":["/Users/edwin.youngchan.park/Documents/sparta/inocamp/03주특기/InocamReactPrec/threejs/src/App.js"],"sourcesContent":["import React from \"react\";\nimport { GlobalStyle, Layout } from \"./styled\";\nimport { Canvas } from \"@react-three/fiber\";\n// import { Box } from '@react-three/drei'\n\nfunction App() {\n  return (\n    <Layout>\n      <GlobalStyle />\n      <Canvas>\n        <mesh>\n          <Geometry \n            attach=\"geometry\" \n            args={[1, 1, 1]} />\n          <meshStandardMaterial attach=\"material\" />\n        </mesh>\n      </Canvas>\n    </Layout>\n  );\n}\n\nexport default App;\n\n/*\n  <Canvas> 내부에는 다음의 요소만을 사용할 수 있다 Mesh, BufferGeometry, Material\n  기타, HTML 태그들은 <Canvas> 외부에서 선언해야 한다. \n\n  Three.js 맥락에서 Mesh, BufferGeometry 및 Material은 3D 그래칙을 렌더링 하는 데 사용되는 기본 구성 요소로\n\n  Mesh : \n  \" 형상과 재질을 결합한 3D 개체를 \"\n  3D 모델을 나타내는 객체로, 형성과 재료를 결합하여 모델의 시각적 모양과 속성을 정의한다. \n  형상은 모델의 모양과 구조를 정의하고, 재료는 모델의 표면이 빛과 상호 작용하는 방식을 정의한다. \n  메시는 geometry와 material 지정하여 생성하고, 형상은 정육면체, 구 또는 원통과 같은 미리 정의된 모양이거나 꼭지점과 면을 사용하여 정의된 사용자 지정 형상일 수 있습니다. \n\n  메시가 생성되면 장면에 추가하고 Three.js의 렌더러를 사용하여 렌더링할 수 있다. \n  즉 메시는 위치, 회전 및 배율을 조작하여 원하는 변형 및 애니메이션은 얻는다. \n\n  [ 강의 ](https://www.youtube.com/watch?v=fdtqqyeKRJk)\n  <boxBufferGeometry> >> \" boxGeometry \"\n  1) attach : Three.js 개체의 특정부분에 연결하는데 사용한다. 지오메트리를 부탁하면 객체의 일부가 되어 모양을 정의한다. \n\n  <mesh>\n    <boxGeometry \n      attach=\"geometry\" \n      args={[1, 1, 1]} />\n    <meshStandardMaterial attach=\"material\" />\n  </mesh>\n\n  위의 코드는 @react-three/drei 의 <Box> 태그로 쉽게 구현할 수 있는데, @react-three/drei 와 drei 라이브러리를 같이 사용할 경우 둘다 다운 받아야 하는 것 같다. \n\n  <Box children={<meshStandardMaterial attach=\"material\" />}/>\n\n\n  BufferGeometry :\n  \" 효율적인 렌더링을 위해 셩상 데이터의 최적화된 표현을 제공 \"\n  BufferGeometry는 Three.js에서 기하학 데이터의 최적화된 표현으로, 지오메트리 형식에 비해 많은 양의 지오메트리를 렌더링하는 데 더 효율적이다. \n  정점, 면, 법선 및 UV 좌표와 같은 기하학적 데이터는 일반적으로 JS 배열에 저장된다. \n  BufferGeometry는 이러한 배열을 가져와 렌더링을 위해 GPU에서 직접 사용할 수 있는 저수준 버퍼로 변환한다. \n\n  Material :\n  \" 색상, 질감 및 음영과 같은 개체 표현의 시각적 속성을 정의 \"\n  Three.js 에서 객체 표면의 시각적 속성을 정의합니다. \n  빛이 개체와 상호 작용하는 방식을 결정하여 개체가 음영 처리되는 방식과 해당 색상 및 질감이 표시되는 방식에 영향을 미칩니다. \n  재료는 색상, 방출 색상, 불투명도, 투명도, 광택, 거칠기, 금속성 등과 같은 속성을 가질 수 있습니다.\n  또한 확산 맵, 반사 맵, 일반 맵 및 변위 맵과 같은 보다 사실적인 렌더링을 위해 텍스처를 통합할 수 있습니다.\n\n*/\n\n// import React, { useState } from \"react\";\n// import { Canvas, useFrame } from \"@react-three/fiber\";\n// import { OrbitControls } from '@react-three/drei';\n\n// function App() {\n\n//   return (\n//     <div>\n//       <h1>Three.js 다뤄보기</h1>\n//       <Canvas>\n//       <OrbitControls autoRotate={true}/>\n//         <mesh>\n//           <ambientLight intensity={1} />\n//           <directionalLight position={[-1,0,1]}  intensity={0.8} />\n//           <boxGeometry args={[5, 3, 3]} />\n//           <meshStandardMaterial attach=\"material\" color=\"blue\"/>\n//         </mesh>\n//       </Canvas>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// function MyRotatingBox ()  {\n//   const myMesh = React.useRef();\n//   const [active, setActive] = useState(false);\n//   useFrame(({ clock }) => {\n//     const a = clock.getElapsedTime();\n//     myMesh.current.rotation.x = a;\n//   });\n//   return (\n//     <mesh\n//     scale={active ? 1.5 : 1}\n//     onClick={()=> setActive(!active)}\n//     ref={myMesh}\n//   >\n//     <boxGeometry />\n//     <meshStandardMaterial color=\"orange\"/>\n//   </mesh>\n//   )\n// }\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,MAAM,QAAQ,UAAU;AAC9C,SAASC,MAAM,QAAQ,oBAAoB;AAC3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EACb,oBACED,OAAA,CAACH,MAAM;IAAAK,QAAA,gBACLF,OAAA,CAACJ,WAAW;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACfN,OAAA,CAACF,MAAM;MAAAI,QAAA,eACLF,OAAA;QAAAE,QAAA,gBACEF,OAAA,CAACO,QAAQ;UACPC,MAAM,EAAC,UAAU;UACjBC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACrBN,OAAA;UAAsBQ,MAAM,EAAC;QAAU;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb;AAACI,EAAA,GAdQT,GAAG;AAgBZ,eAAeA,GAAG;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}