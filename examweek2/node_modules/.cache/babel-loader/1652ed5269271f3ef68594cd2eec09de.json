{"ast":null,"code":"// Action value\nconst ADD_TODO = \"ADD_TODO\";\nconst GET_TODO_BY_ID = \"GET_TODO_BY_ID\";\nconst DELETE_TODO = \"DELETE_TODO\";\nconst TOGGLE_STATUS_TODO = \"TOGGLE_STATUS_TODO\"; // Action Creator\n// Todo를 추가하는 action creator\n\nexport const addTodo = payload => {\n  return {\n    type: ADD_TODO,\n    payload\n  };\n}; // Todo를 지우는 action creator\n\nexport const deleteTodo = payload => {\n  return {\n    type: DELETE_TODO,\n    payload\n  };\n}; // Todo를 isDone를 변경하는 action creator\n\nexport const toggleStatusTodo = payload => {\n  return {\n    type: TOGGLE_STATUS_TODO,\n    payload\n  };\n}; // 상세 페이지에서 특정 Todo만 조회하는 action creator\n\nexport const getTodoByID = payload => {\n  return {\n    type: GET_TODO_BY_ID,\n    payload\n  };\n}; // initial state\n\nconst initialState = {\n  todos: [{\n    id: \"1\",\n    title: \"리액트\",\n    body: \"리액트를 배워봅시다\",\n    isDone: false\n  }]\n};\n\nconst todos = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_TODO:\n      return { ...state,\n        todos: [...state.todos, action.payload]\n      };\n\n    case DELETE_TODO:\n      return { ...state,\n        todos: state.todos.filter(item => item.id !== action.payload)\n      };\n\n    case TOGGLE_STATUS_TODO: // return {\n    //   ...state,\n    //   todos: state.todos.map((todo) => {\n    //     if (todo.id === action.payload) {\n    //       return {\n    //         ...todo,\n    //         isDone: !todo.isDone,\n    //       };\n    //     } else {\n    //       return todo;\n    //     }\n    //   }),\n    // };\n\n    case GET_TODO_BY_ID:\n      return { ...state,\n        todo: state.todos.find(todo => {\n          return todo.id === action.payload;\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todos;\nexport const getTodo = state => state.todos.todos;","map":{"version":3,"names":["ADD_TODO","GET_TODO_BY_ID","DELETE_TODO","TOGGLE_STATUS_TODO","addTodo","payload","type","deleteTodo","toggleStatusTodo","getTodoByID","initialState","todos","id","title","body","isDone","state","action","filter","item","todo","find","getTodo"],"sources":["/Users/edwin.youngchan.park/Documents/sparta/inocamp/03주특기/InocamReactPrec/examweek2/src/redux/modules/todos.js"],"sourcesContent":["// Action value\nconst ADD_TODO = \"ADD_TODO\";\nconst GET_TODO_BY_ID = \"GET_TODO_BY_ID\";\nconst DELETE_TODO = \"DELETE_TODO\";\nconst TOGGLE_STATUS_TODO = \"TOGGLE_STATUS_TODO\";\n\n// Action Creator\n// Todo를 추가하는 action creator\nexport const addTodo = (payload) => {\n  return {\n    type: ADD_TODO,\n    payload,\n  };\n};\n\n// Todo를 지우는 action creator\nexport const deleteTodo = (payload) => {\n  return {\n    type: DELETE_TODO,\n    payload,\n  };\n};\n\n// Todo를 isDone를 변경하는 action creator\nexport const toggleStatusTodo = (payload) => {\n  return {\n    type: TOGGLE_STATUS_TODO,\n    payload,\n  };\n};\n\n// 상세 페이지에서 특정 Todo만 조회하는 action creator\nexport const getTodoByID = (payload) => {\n  return {\n    type: GET_TODO_BY_ID,\n    payload,\n  };\n};\n\n// initial state\nconst initialState = {\n  todos: [\n    {\n      id: \"1\",\n      title: \"리액트\",\n      body: \"리액트를 배워봅시다\",\n      isDone: false,\n    },\n  ]\n};\n\nconst todos = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos : state.todos.filter(item => item.id !== action.payload)\n      }\n\n    case TOGGLE_STATUS_TODO:\n      // return {\n      //   ...state,\n      //   todos: state.todos.map((todo) => {\n      //     if (todo.id === action.payload) {\n      //       return {\n      //         ...todo,\n      //         isDone: !todo.isDone,\n      //       };\n      //     } else {\n      //       return todo;\n      //     }\n      //   }),\n      // };\n\n    case GET_TODO_BY_ID:\n      return {\n        ...state,\n        todo: state.todos.find((todo) => {\n          return todo.id === action.payload;\n        }),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default todos;\nexport const getTodo = (state) => state.todos.todos\n"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,UAAjB;AACA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,kBAAkB,GAAG,oBAA3B,C,CAEA;AACA;;AACA,OAAO,MAAMC,OAAO,GAAIC,OAAD,IAAa;EAClC,OAAO;IACLC,IAAI,EAAEN,QADD;IAELK;EAFK,CAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAME,UAAU,GAAIF,OAAD,IAAa;EACrC,OAAO;IACLC,IAAI,EAAEJ,WADD;IAELG;EAFK,CAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMG,gBAAgB,GAAIH,OAAD,IAAa;EAC3C,OAAO;IACLC,IAAI,EAAEH,kBADD;IAELE;EAFK,CAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMI,WAAW,GAAIJ,OAAD,IAAa;EACtC,OAAO;IACLC,IAAI,EAAEL,cADD;IAELI;EAFK,CAAP;AAID,CALM,C,CAOP;;AACA,MAAMK,YAAY,GAAG;EACnBC,KAAK,EAAE,CACL;IACEC,EAAE,EAAE,GADN;IAEEC,KAAK,EAAE,KAFT;IAGEC,IAAI,EAAE,YAHR;IAIEC,MAAM,EAAE;EAJV,CADK;AADY,CAArB;;AAWA,MAAMJ,KAAK,GAAG,YAAkC;EAAA,IAAjCK,KAAiC,uEAAzBN,YAAyB;EAAA,IAAXO,MAAW;;EAC9C,QAAQA,MAAM,CAACX,IAAf;IACE,KAAKN,QAAL;MACE,OAAO,EACL,GAAGgB,KADE;QAELL,KAAK,EAAE,CAAC,GAAGK,KAAK,CAACL,KAAV,EAAiBM,MAAM,CAACZ,OAAxB;MAFF,CAAP;;IAKF,KAAKH,WAAL;MACE,OAAO,EACL,GAAGc,KADE;QAELL,KAAK,EAAGK,KAAK,CAACL,KAAN,CAAYO,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACP,EAAL,KAAYK,MAAM,CAACZ,OAA9C;MAFH,CAAP;;IAKF,KAAKF,kBAAL,CAbF,CAcI;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEF,KAAKF,cAAL;MACE,OAAO,EACL,GAAGe,KADE;QAELI,IAAI,EAAEJ,KAAK,CAACL,KAAN,CAAYU,IAAZ,CAAkBD,IAAD,IAAU;UAC/B,OAAOA,IAAI,CAACR,EAAL,KAAYK,MAAM,CAACZ,OAA1B;QACD,CAFK;MAFD,CAAP;;IAMF;MACE,OAAOW,KAAP;EApCJ;AAsCD,CAvCD;;AAyCA,eAAeL,KAAf;AACA,OAAO,MAAMW,OAAO,GAAIN,KAAD,IAAWA,KAAK,CAACL,KAAN,CAAYA,KAAvC"},"metadata":{},"sourceType":"module"}