{"ast":null,"code":"import { createApi } from '@reduxjs/toolkit/query/react';\nimport { instance } from './instance';\nconst axiosBaseQuery = () => async _ref => {\n  let {\n    url,\n    method,\n    data,\n    types\n  } = _ref;\n  try {\n    const res = await instance({\n      method,\n      url,\n      data\n    });\n    console.log(types && types.type);\n    if (types && types.type === \"comment\") {\n      //   return {data:res.data.filter(todo => todo.Todoid === type.id)}\n    }\n    return {\n      data: res.data\n    };\n  } catch (error) {\n    return console.log(\"에러\", error);\n  }\n};\nconst todortkquery = createApi({\n  baseQuery: axiosBaseQuery(),\n  tagTypes: [\"TODOS\"],\n  endpoints: builder => ({\n    getTodoRTK: builder.query({\n      query: () => ({\n        url: \"/todos\",\n        method: \"get\"\n      }),\n      providesTags: ['TODOS']\n    }),\n    postTodoRTK: builder.mutation({\n      query: payload => ({\n        url: \"/todos\",\n        method: \"post\",\n        data: payload\n      }),\n      invalidatesTags: ['TODOS']\n    }),\n    deleteTodoRTK: builder.mutation({\n      query: payload => ({\n        url: `/todos/${payload}`,\n        method: \"delete\"\n      }),\n      invalidatesTags: ['TODOS']\n    }),\n    updateTodoRTK: builder.mutation({\n      query: payload => {\n        console.log(payload.content);\n        return {\n          url: `/todos/${payload.id}`,\n          method: \"patch\",\n          data: {\n            content: payload.content\n          }\n        };\n      },\n      invalidatesTags: ['TODOS']\n    }),\n    // 댓글관련 부분 \n    getCommentRTK: builder.query({\n      query: payload => ({\n        url: `/comments`,\n        method: \"get\",\n        types: {\n          type: \"comment\",\n          id: payload\n        }\n      }),\n      providesTags: ['COMMENT']\n    }),\n    postTodoCommentRTK: builder.mutation({\n      query: payload => {\n        console.log(payload);\n        return {\n          url: `/comments`,\n          method: \"post\",\n          data: payload\n        };\n      },\n      invalidatesTags: ['COMMENT']\n    }),\n    // 상세페이지에서의 조회\n    getFindTodoRTK: builder.query({\n      query: id => ({\n        url: `/todos/${id}`,\n        method: \"get\"\n      }),\n      providesTags: result => [{\n        type: \"TODOS\",\n        id: result.id\n      }]\n    })\n  })\n});\nexport const {\n  useGetTodoRTKQuery,\n  usePostTodoRTKMutation,\n  useDeleteTodoRTKMutation,\n  useUpdateTodoRTKMutation,\n  useGetFindTodoRTKQuery,\n  useGetCommentRTKQuery,\n  usePostTodoCommentRTKMutation\n} = todortkquery;\nexport default todortkquery;","map":{"version":3,"names":["createApi","instance","axiosBaseQuery","_ref","url","method","data","types","res","console","log","type","error","todortkquery","baseQuery","tagTypes","endpoints","builder","getTodoRTK","query","providesTags","postTodoRTK","mutation","payload","invalidatesTags","deleteTodoRTK","updateTodoRTK","content","id","getCommentRTK","postTodoCommentRTK","getFindTodoRTK","result","useGetTodoRTKQuery","usePostTodoRTKMutation","useDeleteTodoRTKMutation","useUpdateTodoRTKMutation","useGetFindTodoRTKQuery","useGetCommentRTKQuery","usePostTodoCommentRTKMutation"],"sources":["/Users/edwin.youngchan.park/Documents/sparta/inocamp/03주특기/InocamReactPrec/IncamReact_lev4/src/redux/api/todortkquery.js"],"sourcesContent":["import { createApi } from '@reduxjs/toolkit/query/react'\nimport { instance } from './instance';\n\nconst axiosBaseQuery = () => async ({url, method, data, types}) => {\n  try {\n    const res = await instance({method,url,data})\n    console.log(types && types.type);\n    if (types && types.type === \"comment\" ) {\n    //   return {data:res.data.filter(todo => todo.Todoid === type.id)}\n    }\n    return {data:res.data}\n  } catch (error) {\n    return console.log(\"에러\", error);\n  }\n}\n\nconst todortkquery = createApi({\n  baseQuery : axiosBaseQuery(),\n  tagTypes: [\"TODOS\"],\n  endpoints : builder => ({\n    getTodoRTK : builder.query({\n      query: () => ({url:\"/todos\", method:\"get\"}),\n      providesTags: ['TODOS'],\n    }),\n    postTodoRTK : builder.mutation({\n      query: (payload) => ({url:\"/todos\", method:\"post\", data:payload}),\n      invalidatesTags: ['TODOS']\n    }),\n    deleteTodoRTK : builder.mutation({\n      query: (payload) => ({url:`/todos/${payload}`, method:\"delete\"}),\n      invalidatesTags: ['TODOS']\n    }),\n    updateTodoRTK : builder.mutation({\n      query: (payload) => {\n        console.log(payload.content);\n        return ({url:`/todos/${payload.id}`, method:\"patch\", data:{content:payload.content}})\n      },\n      invalidatesTags: ['TODOS']\n    }),\n\n    // 댓글관련 부분 \n    getCommentRTK : builder.query({\n      query: (payload) => ({url:`/comments`, method:\"get\", types:{type:\"comment\", id:payload}}),\n      providesTags: ['COMMENT']\n    }),\n\n    postTodoCommentRTK : builder.mutation({\n      query: (payload) => {\n        console.log(payload);\n        return ({url:`/comments`, method:\"post\", data:payload})\n      },\n      invalidatesTags : ['COMMENT']\n    }),\n\n    // 상세페이지에서의 조회\n    getFindTodoRTK : builder.query({\n      query: (id) => ({url:`/todos/${id}`, method:\"get\"}),\n      providesTags: (result) => [{type:\"TODOS\", id:result.id}]\n    }),\n  })\n})\n\nexport const {useGetTodoRTKQuery, usePostTodoRTKMutation, useDeleteTodoRTKMutation, useUpdateTodoRTKMutation, useGetFindTodoRTKQuery, useGetCommentRTKQuery, usePostTodoCommentRTKMutation} = todortkquery\nexport default todortkquery"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}