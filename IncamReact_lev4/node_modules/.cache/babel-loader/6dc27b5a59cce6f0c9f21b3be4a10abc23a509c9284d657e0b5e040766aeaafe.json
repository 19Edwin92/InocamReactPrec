{"ast":null,"code":"import { createApi } from '@reduxjs/toolkit/query/react';\nimport { instance } from './instance';\nconst axiosBaseQuery = () => async _ref => {\n  let {\n    url,\n    method,\n    data\n  } = _ref;\n  try {\n    const res = await instance({\n      method,\n      url,\n      data\n    });\n    return {\n      data: res.data\n    };\n  } catch (error) {\n    return console.log(\"에러\", error);\n  }\n};\nconst todortkquery = createApi({\n  baseQuery: axiosBaseQuery(),\n  tagTypes: [\"TODOS\"],\n  endpoints: builder => ({\n    getTodoRTK: builder.query({\n      query: () => ({\n        url: \"/todos\",\n        method: \"get\"\n      }),\n      providesTags: ['TODOS']\n    }),\n    postTodoRTK: builder.mutation({\n      query: payload => ({\n        url: \"/todos\",\n        method: \"post\",\n        data: payload\n      }),\n      invalidatesTags: ['TODOS']\n    }),\n    deleteTodoRTK: builder.mutation({\n      query: payload => ({\n        url: `/todos/${payload}`,\n        method: \"delete\"\n      }),\n      invalidatesTags: ['TODOS']\n    }),\n    updateTodoRTK: builder.mutation({\n      query: payload => {\n        console.log(payload);\n        return {\n          url: `/todos/${payload.id}`,\n          method: \"patch\",\n          data: payload.content\n        };\n      },\n      invalidatesTags: ['TODOS']\n    }),\n    // 상세페이지에서의 조회\n    getFindTodoRTK: builder.query({\n      query: id => ({\n        url: `/todos/${id}`,\n        method: \"get\"\n      }),\n      providesTags: result => [{\n        type: \"TODOS\",\n        id: result.id\n      }]\n    })\n  })\n});\nexport const {\n  useGetTodoRTKQuery,\n  usePostTodoRTKMutation,\n  useDeleteTodoRTKMutation,\n  useUpdateTodoRTKMutation,\n  useGetFindTodoRTKQuery\n} = todortkquery;\nexport default todortkquery;","map":{"version":3,"names":["createApi","instance","axiosBaseQuery","_ref","url","method","data","res","error","console","log","todortkquery","baseQuery","tagTypes","endpoints","builder","getTodoRTK","query","providesTags","postTodoRTK","mutation","payload","invalidatesTags","deleteTodoRTK","updateTodoRTK","id","content","getFindTodoRTK","result","type","useGetTodoRTKQuery","usePostTodoRTKMutation","useDeleteTodoRTKMutation","useUpdateTodoRTKMutation","useGetFindTodoRTKQuery"],"sources":["/Users/edwin.youngchan.park/Documents/sparta/inocamp/03주특기/InocamReactPrec/IncamReact_lev4/src/redux/api/todortkquery.js"],"sourcesContent":["import { createApi } from '@reduxjs/toolkit/query/react'\nimport { instance } from './instance';\n\nconst axiosBaseQuery = () => async ({url, method, data}) => {\n  try {\n    const res = await instance({method,url,data})\n    return {data:res.data}\n  } catch (error) {\n    return console.log(\"에러\", error);\n  }\n}\n\nconst todortkquery = createApi({\n  baseQuery : axiosBaseQuery(),\n  tagTypes: [\"TODOS\"],\n  endpoints : builder => ({\n    getTodoRTK : builder.query({\n      query: () => ({url:\"/todos\", method:\"get\"}),\n      providesTags: ['TODOS'],\n    }),\n    postTodoRTK : builder.mutation({\n      query: (payload) => ({url:\"/todos\", method:\"post\", data:payload}),\n      invalidatesTags: ['TODOS']\n    }),\n    deleteTodoRTK : builder.mutation({\n      query: (payload) => ({url:`/todos/${payload}`, method:\"delete\"}),\n      invalidatesTags: ['TODOS']\n    }),\n    updateTodoRTK : builder.mutation({\n      query: (payload) => {\n        console.log(payload);\n        return ({url:`/todos/${payload.id}`, method:\"patch\", data:payload.content})\n      },\n      invalidatesTags: ['TODOS']\n    }),\n\n    // 상세페이지에서의 조회\n    getFindTodoRTK : builder.query({\n      query: (id) => ({url:`/todos/${id}`, method:\"get\"}),\n      providesTags: (result) => [{type:\"TODOS\", id:result.id}]\n    }),\n  })\n})\n\nexport const {useGetTodoRTKQuery, usePostTodoRTKMutation, useDeleteTodoRTKMutation, useUpdateTodoRTKMutation,useGetFindTodoRTKQuery} = todortkquery\nexport default todortkquery"],"mappings":"AAAA,SAASA,SAAS,QAAQ,8BAA8B;AACxD,SAASC,QAAQ,QAAQ,YAAY;AAErC,MAAMC,cAAc,GAAGA,CAAA,KAAM,MAAAC,IAAA,IAA+B;EAAA,IAAxB;IAACC,GAAG;IAAEC,MAAM;IAAEC;EAAI,CAAC,GAAAH,IAAA;EACrD,IAAI;IACF,MAAMI,GAAG,GAAG,MAAMN,QAAQ,CAAC;MAACI,MAAM;MAACD,GAAG;MAACE;IAAI,CAAC,CAAC;IAC7C,OAAO;MAACA,IAAI,EAACC,GAAG,CAACD;IAAI,CAAC;EACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOC,OAAO,CAACC,GAAG,CAAC,IAAI,EAAEF,KAAK,CAAC;EACjC;AACF,CAAC;AAED,MAAMG,YAAY,GAAGX,SAAS,CAAC;EAC7BY,SAAS,EAAGV,cAAc,CAAC,CAAC;EAC5BW,QAAQ,EAAE,CAAC,OAAO,CAAC;EACnBC,SAAS,EAAGC,OAAO,KAAK;IACtBC,UAAU,EAAGD,OAAO,CAACE,KAAK,CAAC;MACzBA,KAAK,EAAEA,CAAA,MAAO;QAACb,GAAG,EAAC,QAAQ;QAAEC,MAAM,EAAC;MAAK,CAAC,CAAC;MAC3Ca,YAAY,EAAE,CAAC,OAAO;IACxB,CAAC,CAAC;IACFC,WAAW,EAAGJ,OAAO,CAACK,QAAQ,CAAC;MAC7BH,KAAK,EAAGI,OAAO,KAAM;QAACjB,GAAG,EAAC,QAAQ;QAAEC,MAAM,EAAC,MAAM;QAAEC,IAAI,EAACe;MAAO,CAAC,CAAC;MACjEC,eAAe,EAAE,CAAC,OAAO;IAC3B,CAAC,CAAC;IACFC,aAAa,EAAGR,OAAO,CAACK,QAAQ,CAAC;MAC/BH,KAAK,EAAGI,OAAO,KAAM;QAACjB,GAAG,EAAE,UAASiB,OAAQ,EAAC;QAAEhB,MAAM,EAAC;MAAQ,CAAC,CAAC;MAChEiB,eAAe,EAAE,CAAC,OAAO;IAC3B,CAAC,CAAC;IACFE,aAAa,EAAGT,OAAO,CAACK,QAAQ,CAAC;MAC/BH,KAAK,EAAGI,OAAO,IAAK;QAClBZ,OAAO,CAACC,GAAG,CAACW,OAAO,CAAC;QACpB,OAAQ;UAACjB,GAAG,EAAE,UAASiB,OAAO,CAACI,EAAG,EAAC;UAAEpB,MAAM,EAAC,OAAO;UAAEC,IAAI,EAACe,OAAO,CAACK;QAAO,CAAC;MAC5E,CAAC;MACDJ,eAAe,EAAE,CAAC,OAAO;IAC3B,CAAC,CAAC;IAEF;IACAK,cAAc,EAAGZ,OAAO,CAACE,KAAK,CAAC;MAC7BA,KAAK,EAAGQ,EAAE,KAAM;QAACrB,GAAG,EAAE,UAASqB,EAAG,EAAC;QAAEpB,MAAM,EAAC;MAAK,CAAC,CAAC;MACnDa,YAAY,EAAGU,MAAM,IAAK,CAAC;QAACC,IAAI,EAAC,OAAO;QAAEJ,EAAE,EAACG,MAAM,CAACH;MAAE,CAAC;IACzD,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EAACK,kBAAkB;EAAEC,sBAAsB;EAAEC,wBAAwB;EAAEC,wBAAwB;EAACC;AAAsB,CAAC,GAAGvB,YAAY;AACnJ,eAAeA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}