{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { __poseTodosThunk, __updateTodosThunk, selecttodoSlice } from \"../redux/modules/todoSlice\";\nimport { useState } from \"react\";\nexport const useThunk = todoid => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    todos: todoSlice\n  } = useSelector(selecttodoSlice);\n  const [newtodos, setNewTodos] = useState(\"\");\n  const onChangeInput = e => {\n    setNewTodos(e.target.value);\n  };\n  const onSubmitHandler = async e => {\n    e.preventDefault();\n    dispatch(__poseTodosThunk({\n      id: Date.now(),\n      title: newtodos\n    })); // THUNK // AXIOS GET 기능구현 : CRUD (1) READ // (3) 서버와 동기화 \n    setNewTodos(\"\");\n  }; // 리렌더링 발생\n\n  // AXIOS DELETE 기능구현 : CRUD (3) DELETE\n  const onDeleteHandler = async () => {\n    dispatch(__deleteTodosThunk(todoid)); // THUNK // AXIOS GET 기능구현 : CRUD (1) READ // (3) 서버와 동기화\n  }; // 리렌더링 발생\n\n  // AXIOS UPDATE 기능구현 : CRUD (4) UPDATE\n  const [update, setUpdate] = useState(false); // 조건부 렌더링\n  const inputRef = useRef(null);\n  const onUpdateHandler = () => {\n    setUpdate(pre => !pre);\n  };\n  const [updatetodos, setUpdateTodos] = useState(title); // 수정할 title의 valuse\n\n  const onUpdateSubmitHandler = () => async e => {\n    e.preventDefault();\n    dispatch(__updateTodosThunk({\n      id: todoid,\n      content: {\n        title: updatetodos\n      }\n    }));\n    setUpdate(pre => !pre);\n  }; // 리렌더링 발생\n\n  return {\n    todoSlice,\n    newtodos,\n    dispatch,\n    onSubmitHandler,\n    onChangeInput,\n    onDeleteHandler,\n    onUpdateHandler,\n    onUpdateSubmitHandler\n  };\n};\n_s(useThunk, \"Dmi4W9/cnwh46aycEdzGvGMksoE=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"names":["useDispatch","useSelector","__poseTodosThunk","__updateTodosThunk","selecttodoSlice","useState","useThunk","todoid","_s","dispatch","todos","todoSlice","newtodos","setNewTodos","onChangeInput","e","target","value","onSubmitHandler","preventDefault","id","Date","now","title","onDeleteHandler","__deleteTodosThunk","update","setUpdate","inputRef","useRef","onUpdateHandler","pre","updatetodos","setUpdateTodos","onUpdateSubmitHandler","content"],"sources":["/Users/edwin.youngchan.park/Documents/sparta/inocamp/03주특기/InocamReactPrec/axios-thunk/src/hooks/useThunk.js"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\"\nimport { __poseTodosThunk, __updateTodosThunk, selecttodoSlice } from \"../redux/modules/todoSlice\"\nimport { useState } from \"react\"\n\nexport const useThunk = (todoid) => {\n  const dispatch = useDispatch()\n  const {todos:todoSlice} = useSelector(selecttodoSlice)\n\n\n  const [newtodos, setNewTodos] = useState(\"\")\n  const onChangeInput = (e) => {\n    setNewTodos(e.target.value)\n  }\n\n    const onSubmitHandler = async (e) => {\n    e.preventDefault()\n    dispatch(__poseTodosThunk({id:Date.now(), title:newtodos})) // THUNK // AXIOS GET 기능구현 : CRUD (1) READ // (3) 서버와 동기화 \n    setNewTodos(\"\")\n  } // 리렌더링 발생\n\n   // AXIOS DELETE 기능구현 : CRUD (3) DELETE\n  const onDeleteHandler = async () => {\n    dispatch(__deleteTodosThunk(todoid)); // THUNK // AXIOS GET 기능구현 : CRUD (1) READ // (3) 서버와 동기화\n  }; // 리렌더링 발생\n\n  // AXIOS UPDATE 기능구현 : CRUD (4) UPDATE\n  const [update, setUpdate] = useState(false); // 조건부 렌더링\n  const inputRef = useRef(null);\n  const onUpdateHandler = () => {\n    setUpdate((pre) => !pre);\n  };\n\n  const [updatetodos, setUpdateTodos] = useState(title); // 수정할 title의 valuse\n\n  const onUpdateSubmitHandler = () => async (e) => {\n    e.preventDefault();\n    dispatch(\n      __updateTodosThunk({ id: todoid, content: { title: updatetodos } })\n    );\n    setUpdate((pre) => !pre);\n  }; // 리렌더링 발생\n\n\n\n\n\n  return {todoSlice, newtodos, dispatch, onSubmitHandler, onChangeInput, onDeleteHandler, onUpdateHandler, onUpdateSubmitHandler}\n}"],"mappings":";AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,gBAAgB,EAAEC,kBAAkB,EAAEC,eAAe,QAAQ,4BAA4B;AAClG,SAASC,QAAQ,QAAQ,OAAO;AAEhC,OAAO,MAAMC,QAAQ,GAAIC,MAAM,IAAK;EAAAC,EAAA;EAClC,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAM;IAACU,KAAK,EAACC;EAAS,CAAC,GAAGV,WAAW,CAACG,eAAe,CAAC;EAGtD,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMS,aAAa,GAAIC,CAAC,IAAK;IAC3BF,WAAW,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7B,CAAC;EAEC,MAAMC,eAAe,GAAG,MAAOH,CAAC,IAAK;IACrCA,CAAC,CAACI,cAAc,CAAC,CAAC;IAClBV,QAAQ,CAACP,gBAAgB,CAAC;MAACkB,EAAE,EAACC,IAAI,CAACC,GAAG,CAAC,CAAC;MAAEC,KAAK,EAACX;IAAQ,CAAC,CAAC,CAAC,EAAC;IAC5DC,WAAW,CAAC,EAAE,CAAC;EACjB,CAAC,EAAC;;EAED;EACD,MAAMW,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClCf,QAAQ,CAACgB,kBAAkB,CAAClB,MAAM,CAAC,CAAC,CAAC,CAAC;EACxC,CAAC,CAAC,CAAC;;EAEH;EACA,MAAM,CAACmB,MAAM,EAAEC,SAAS,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC7C,MAAMuB,QAAQ,GAAGC,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5BH,SAAS,CAAEI,GAAG,IAAK,CAACA,GAAG,CAAC;EAC1B,CAAC;EAED,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG5B,QAAQ,CAACkB,KAAK,CAAC,CAAC,CAAC;;EAEvD,MAAMW,qBAAqB,GAAGA,CAAA,KAAM,MAAOnB,CAAC,IAAK;IAC/CA,CAAC,CAACI,cAAc,CAAC,CAAC;IAClBV,QAAQ,CACNN,kBAAkB,CAAC;MAAEiB,EAAE,EAAEb,MAAM;MAAE4B,OAAO,EAAE;QAAEZ,KAAK,EAAES;MAAY;IAAE,CAAC,CACpE,CAAC;IACDL,SAAS,CAAEI,GAAG,IAAK,CAACA,GAAG,CAAC;EAC1B,CAAC,CAAC,CAAC;;EAMH,OAAO;IAACpB,SAAS;IAAEC,QAAQ;IAAEH,QAAQ;IAAES,eAAe;IAAEJ,aAAa;IAAEU,eAAe;IAAEM,eAAe;IAAEI;EAAqB,CAAC;AACjI,CAAC;AAAA1B,EAAA,CA3CYF,QAAQ;EAAA,QACFN,WAAW,EACFC,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}