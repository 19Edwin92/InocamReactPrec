{"ast":null,"code":"var _jsxFileName = \"/Users/edwin.youngchan.park/Documents/sparta/inocamp/03\\u110C\\u116E\\u1110\\u1173\\u11A8\\u1100\\u1175/InocamReactPrec/axios-thunk/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport { styled } from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst token = null;\n\n/* AXIOS ------------------------------------------------------------------ */\n/* \n  네트워크 통신 라이브러리 \n  (1) 인스턴스 생성\n  (2) 인터셉터 가능 >> 통신라이브러리 >> 요청(클 -> 서)과 응답(서 -> 클)\n      요청 클라 -- (어떤 동작) --> 서버\n      응답 서버 -- (어떤 동작) --> 클라\n*/\nconst instance = axios.create({\n  baseURL: \"http://localhost:3001/\"\n}); // todos \n\n// const instance3004 = axios.create({\n//   baseURL:\"http://localhost:3004/\"\n// }) // Users\n\n// instance.interceptors.request.use(\n//   function (config) {\n//     console.log(\"인터셉터 요청 성공!\");\n//     config.headers.Authorization = token ? `Bearer ${token}` : \"\";\n//     return config\n//   },\n//   function (error) {\n//     console.log(\"인터셉터 요청 오류!\");\n//     return Promise.reject(error)\n//   } \n// )\n\n// instance.interceptors.response.use(\n//   function (config) {\n//     console.log(\"인터셉터 응답 성공!\");\n//     return config\n//   },\n//   function (error) {\n//     console.log(\"인터셉터 응답 오류!\");\n//     return Promise.reject(error)\n//   } \n// )\n\n/* App.js ------------------------------------------------------------------- */\n\nfunction App() {\n  _s();\n  // AXIOS GET 기능구현 : CRUD (1) READ\n  const [todos, setTodos] = useState();\n  const getTodos = async () => {\n    const res = await instance.get(\"/todos\");\n    setTodos(res.data);\n  }; // 비동기통신으로 서버의 데이터를 불러올 getTodos 만들었죠. 호출해야 동작을 하는데 언제 호출할까? // (1) 해당 컴포넌트에 접근했을 때 // (2) 서버 데이터가 변경되었을 때 \n\n  useEffect(() => {\n    getTodos(); // AXIOS POST (3) 서버에 다시 요청을 해서, todos와 서버의 데이터를 동기화 합니다. \n  }, [setTodos]); // 의존선배열이 변경되면, useEffect 그때마다 동작을 하니까 \n\n  // AXIOS POST 기능구현 : CRUD (2) CREATE\n  const [newtodos, setNewTodos] = useState(\"\");\n  const onChangeInput = e => {\n    setNewTodos(e.target.value);\n  };\n  const onSubmitHandler = async e => {\n    e.preventDefault();\n    setTodos([...todos, {\n      id: Date.now(),\n      title: newtodos\n    }]); // (1) 리렌더링을 발생시키기 위해서, todos의 상태를 변경합니다. // 리렌더링 준비\n    await instance.post(\"/todos\", {\n      id: Date.now(),\n      title: newtodos\n    }); // 비동기통신 // (2) 서버를 업데이트 \n    setNewTodos(\"\");\n  }; // 리렌더링 발생\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"JSON-Server\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: onSubmitHandler,\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        value: newtodos,\n        type: \"text\",\n        onChange: onChangeInput,\n        maxLength: 10\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), todos && todos.map(_ref => {\n      let {\n        id,\n        title\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(Todos, {\n        todoid: id,\n        title: title,\n        todos: todos,\n        setTodos: setTodos\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 44\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rHWg4ueWR5KL9cTQWCAZtPd7VrE=\");\n_c = App;\nexport default App;\nconst Todos = _ref2 => {\n  _s2();\n  let {\n    todoid,\n    title,\n    todos,\n    setTodos\n  } = _ref2;\n  // AXIOS DELETE 기능구현 : CRUD (3) DELETE\n  const onDeleteHandler = async () => {\n    setTodos([...todos.filter(todo => todo.id !== todoid)]); // (1) 리렌더링을 발생시키기 위해서, todos의 상태를 변경합니다.  // 리렌더링 준비\n    await instance.delete(`/todos/${todoid}`); // 비동기통신 // (2) 서버를 업데이트 \n  }; // 리렌더링 발생\n\n  // AXIOS UPDATE 기능구현 : CRUD (4) UPDATE\n  const [update, setUpdate] = useState(false); // 조건부 렌더링\n  const inputRef = useRef(null);\n  const onUpdateHandler = () => {\n    setUpdate(pre => !pre);\n  };\n  const [updatetodos, setUpdateTodos] = useState(title); // 수정할 title의 valuse\n  const onChangeInput = e => {\n    setUpdateTodos(e.target.value);\n  };\n  const onSubmitHandler = todoid => async e => {\n    e.preventDefault();\n    setTodos([...todos.map(todo => todo.id === todoid ? {\n      ...todo,\n      title: updatetodos\n    } : todo)]); // (1) 리렌더링 // 리렌더링 준비\n    await instance.patch(`/todos/${todoid}`, {\n      title: updatetodos\n    }); // PATCH(일부데이터만 수정할 때), PUT(완전히 다 바꿈, 덮어쓰기) (2) 서버를 업데이트\n    setUpdate(pre => !pre);\n  }; // 리렌더링 발생\n  console.log(inputRef.current);\n  return /*#__PURE__*/_jsxDEV(TodosBox, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onDeleteHandler,\n      children: \"\\uC0AD\\uC81C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onUpdateHandler,\n      children: \"\\uC218\\uC815\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this), update ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: onSubmitHandler(todoid),\n        $state: \"update\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: inputRef,\n          value: updatetodos,\n          type: \"text\",\n          onChange: onChangeInput,\n          maxLength: 10\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s2(Todos, \"Ti19IUzHiGwEC9mAaGA3USPIbbI=\");\n_c2 = Todos;\nconst Form = styled.form`\n  box-sizing: border-box;\n  width: 500px;\n  height: 50px;\n  background-color:${_ref3 => {\n  let {\n    $state\n  } = _ref3;\n  return $state === \"update\" ? \"green\" : \"yellow\";\n}};\n  display: flex;\n  align-items: center;\n  position: fixed;\n  transition: 0.5ms linear;\n  left: 0;\n  bottom: 0;\n  margin: 0;\n\n  input {\n    box-sizing: border-box;\n    display: block;\n    width: 100%;\n    height: 30px;\n  }\n`;\n_c3 = Form;\nconst TodosBox = styled.div`\n  box-sizing: border-box;\n  width: 300px;\n  height: 40px;\n  display: flex;\n  padding: 0 10px;\n  align-items: center;\n  border-radius: 50px;\n  border: 1px solid black;\n  background-color: black;\n  color: white;\n  margin: 10px;\n  gap:4px\n`;\n_c4 = TodosBox;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Todos\");\n$RefreshReg$(_c3, \"Form\");\n$RefreshReg$(_c4, \"TodosBox\");","map":{"version":3,"names":["React","useEffect","useRef","useState","axios","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","token","instance","create","baseURL","App","_s","todos","setTodos","getTodos","res","get","data","newtodos","setNewTodos","onChangeInput","e","target","value","onSubmitHandler","preventDefault","id","Date","now","title","post","children","fileName","_jsxFileName","lineNumber","columnNumber","Form","onSubmit","type","onChange","maxLength","map","_ref","Todos","todoid","_c","_ref2","_s2","onDeleteHandler","filter","todo","delete","update","setUpdate","inputRef","onUpdateHandler","pre","updatetodos","setUpdateTodos","patch","console","log","current","TodosBox","onClick","$state","ref","_c2","form","_ref3","_c3","div","_c4","$RefreshReg$"],"sources":["/Users/edwin.youngchan.park/Documents/sparta/inocamp/03주특기/InocamReactPrec/axios-thunk/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport axios from 'axios'\nimport {styled} from 'styled-components'\n\nconst token = null\n\n/* AXIOS ------------------------------------------------------------------ */\n/* \n  네트워크 통신 라이브러리 \n  (1) 인스턴스 생성\n  (2) 인터셉터 가능 >> 통신라이브러리 >> 요청(클 -> 서)과 응답(서 -> 클)\n      요청 클라 -- (어떤 동작) --> 서버\n      응답 서버 -- (어떤 동작) --> 클라\n*/\nconst instance = axios.create({\n  baseURL:\"http://localhost:3001/\"\n}) // todos \n\n// const instance3004 = axios.create({\n//   baseURL:\"http://localhost:3004/\"\n// }) // Users\n\n// instance.interceptors.request.use(\n//   function (config) {\n//     console.log(\"인터셉터 요청 성공!\");\n//     config.headers.Authorization = token ? `Bearer ${token}` : \"\";\n//     return config\n//   },\n//   function (error) {\n//     console.log(\"인터셉터 요청 오류!\");\n//     return Promise.reject(error)\n//   } \n// )\n\n// instance.interceptors.response.use(\n//   function (config) {\n//     console.log(\"인터셉터 응답 성공!\");\n//     return config\n//   },\n//   function (error) {\n//     console.log(\"인터셉터 응답 오류!\");\n//     return Promise.reject(error)\n//   } \n// )\n\n/* App.js ------------------------------------------------------------------- */\n\nfunction App() {\n  \n  // AXIOS GET 기능구현 : CRUD (1) READ\n  const [todos, setTodos] = useState()\n  const getTodos = async () => {\n    const res = await instance.get(\"/todos\");\n    setTodos(res.data);\n  }; // 비동기통신으로 서버의 데이터를 불러올 getTodos 만들었죠. 호출해야 동작을 하는데 언제 호출할까? // (1) 해당 컴포넌트에 접근했을 때 // (2) 서버 데이터가 변경되었을 때 \n  \n  useEffect(()=>{  \n    getTodos() // AXIOS POST (3) 서버에 다시 요청을 해서, todos와 서버의 데이터를 동기화 합니다. \n  },[setTodos]) // 의존선배열이 변경되면, useEffect 그때마다 동작을 하니까 \n\n  // AXIOS POST 기능구현 : CRUD (2) CREATE\n  const [newtodos, setNewTodos] = useState(\"\")\n  const onChangeInput = (e) => {\n    setNewTodos(e.target.value)\n  }\n\n  const onSubmitHandler = async (e) => {\n    e.preventDefault()\n    setTodos([...todos, {id:Date.now(), title:newtodos}]) // (1) 리렌더링을 발생시키기 위해서, todos의 상태를 변경합니다. // 리렌더링 준비\n    await instance.post(\"/todos\", {id:Date.now(), title:newtodos})  // 비동기통신 // (2) 서버를 업데이트 \n    setNewTodos(\"\")\n  } // 리렌더링 발생\n\n  return (\n    <div>\n      <p>JSON-Server</p>\n      <Form onSubmit={onSubmitHandler}>\n        <input value={newtodos} type='text' onChange={onChangeInput} maxLength={10}/>\n      </Form>\n      {todos && todos.map(({id, title}) => <Todos key={id} todoid={id} title={title} todos={todos} setTodos={setTodos}/>)}\n    </div>\n  )\n}\n\nexport default App\n\n\nconst Todos = ({todoid, title, todos, setTodos}) => {\n    // AXIOS DELETE 기능구현 : CRUD (3) DELETE\n  const onDeleteHandler = async () => {\n    setTodos([...todos.filter(todo => todo.id !== todoid)]) // (1) 리렌더링을 발생시키기 위해서, todos의 상태를 변경합니다.  // 리렌더링 준비\n    await instance.delete(`/todos/${todoid}`) // 비동기통신 // (2) 서버를 업데이트 \n  } // 리렌더링 발생\n\n  // AXIOS UPDATE 기능구현 : CRUD (4) UPDATE\n  const [update,setUpdate] = useState(false) // 조건부 렌더링\n  const inputRef = useRef(null)\n  const onUpdateHandler = () => {\n    setUpdate(pre => !pre)\n  }\n  \n  const [updatetodos, setUpdateTodos] = useState(title) // 수정할 title의 valuse\n  const onChangeInput = (e) => {\n    setUpdateTodos(e.target.value)\n  }\n\n  const onSubmitHandler = (todoid) => async (e) => {\n    e.preventDefault()\n    setTodos([...todos.map(todo => todo.id === todoid ? {...todo, title:updatetodos} : todo)]) // (1) 리렌더링 // 리렌더링 준비\n    await instance.patch(`/todos/${todoid}`, {title:updatetodos}) // PATCH(일부데이터만 수정할 때), PUT(완전히 다 바꿈, 덮어쓰기) (2) 서버를 업데이트\n    setUpdate(pre=>!pre)\n  } // 리렌더링 발생\n  console.log(inputRef.current);\n\n  return (\n    <TodosBox>\n        <button onClick={onDeleteHandler}>삭제</button>\n        <button onClick={onUpdateHandler}>수정</button>\n        {update \n          ? (<>\n              <p>{title}</p>\n              <Form onSubmit={onSubmitHandler(todoid)} $state=\"update\">\n                <input ref={inputRef} value={updatetodos} type='text' onChange={onChangeInput} maxLength={10}/>\n              </Form>\n            </>)\n          : <p>{title}</p>}\n    </TodosBox>\n  )\n}\n\nconst Form = styled.form`\n  box-sizing: border-box;\n  width: 500px;\n  height: 50px;\n  background-color:${({$state}) => $state === \"update\" ? \"green\" : \"yellow\"};\n  display: flex;\n  align-items: center;\n  position: fixed;\n  transition: 0.5ms linear;\n  left: 0;\n  bottom: 0;\n  margin: 0;\n\n  input {\n    box-sizing: border-box;\n    display: block;\n    width: 100%;\n    height: 30px;\n  }\n`\n\n\nconst TodosBox = styled.div`\n  box-sizing: border-box;\n  width: 300px;\n  height: 40px;\n  display: flex;\n  padding: 0 10px;\n  align-items: center;\n  border-radius: 50px;\n  border: 1px solid black;\n  background-color: black;\n  color: white;\n  margin: 10px;\n  gap:4px\n`\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}