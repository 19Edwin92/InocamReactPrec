{"ast":null,"code":"import { instance } from \"./axiosInstance\";\nimport { createApi } from '@reduxjs/toolkit/query/react';\nconst axiosBaseQuery = () => async _ref => {\n  let {\n    url,\n    method,\n    data\n  } = _ref;\n  try {\n    const res = await instance({\n      method,\n      url,\n      data\n    });\n    console.log(`${method}`, res);\n    return {\n      data: res.data\n    };\n  } catch (error) {\n    return console.log(\"에러\", error);\n  }\n};\nexport const todoRTKquery = createApi({\n  baseQuery: axiosBaseQuery(),\n  tagTypes: ['TODO'],\n  endpoints: builder => ({\n    // getTodoRTK : builder.query({\n    //   query: () => ({url:\"/todos\", method:\"get\"}),\n    //   providesTags: ['TODO'],\n    // }),\n    getTodoRTK: builder.query({\n      query: () => ({\n        url: \"/api/posts\",\n        method: \"get\"\n      }),\n      providesTags: ['TODO']\n    })\n    // setTodoRTK : builder.mutation({\n    //   query: (payload) => ({url:\"/todos\", method:\"post\", data:payload}),\n    //   invalidatesTags: ['TODO'],\n    // }),\n    // deleteTodoRTK : builder.mutation({\n    //   query: (payload) => ({url:`/todos/${payload}`, method:\"delete\"}),\n    //   invalidatesTags: ['TODO'],\n    // }),\n    // updateTodoRTK : builder.mutation({\n    //   query: ({todoid, data}) => ({url:`/todos/${todoid}`, method:\"patch\", data}),\n    //   invalidatesTags: ['TODO'],\n    // }),\n  })\n});\n\n// export const {useGetTodoRTKQuery, useSetTodoRTKMutation, useDeleteTodoRTKMutation, useUpdateTodoRTKMutation} = todoRTKquery;\nexport const {\n  useGetTodoRTKQuery,\n  useSetTodoRTKMutation,\n  useDeleteTodoRTKMutation,\n  useUpdateTodoRTKMutation\n} = todoRTKquery;\n\n/*\n  RTK Query \n    1) Redux 태생이지만, Redux와 무관하게 동작할 수도 있습니다. \n    2) [생활코딩  RTK Query](https://www.youtube.com/watch?v=pnpO3o8mLBU)\n    3) use...query 자동실행\n        - 객체를 리턴 \n        보통 isFetching & isLoading으로 확인합니다. \n    4) use...Mutation 함수호출시 서버로 데이터를 전송한다.\n        - 배열을 리턴\n        isFetching이 따로 없습니다. isLoading이 있습니다. \n    5) 서버 캐시의 패칭과 캐싱\n\n  사용하기 : Without Redux \n    1) yarn add @reduxjs/toolkit\n    2) <ApiProvider>\n        - index.js\n          <ApiProvider api={todoRTKquery}>\n            <App>\n          </ApiProvider>\n\n  사용하기 : Redux, configStore\n*/","map":{"version":3,"names":["instance","createApi","axiosBaseQuery","_ref","url","method","data","res","console","log","error","todoRTKquery","baseQuery","tagTypes","endpoints","builder","getTodoRTK","query","providesTags","useGetTodoRTKQuery","useSetTodoRTKMutation","useDeleteTodoRTKMutation","useUpdateTodoRTKMutation"],"sources":["/Users/edwin.youngchan.park/Documents/sparta/inocamp/03주특기/InocamReactPrec/axios-thunk/src/api/todoRTKquery.js"],"sourcesContent":["import { instance } from \"./axiosInstance\";\nimport { createApi } from '@reduxjs/toolkit/query/react'\n\nconst axiosBaseQuery = () => async ({url, method, data}) => {\n  try {\n    const res = await instance({method,url,data})\n    console.log(`${method}`, res);\n    return {data: res.data}\n  } catch (error) {\n    return console.log(\"에러\", error);\n  }\n}\n\nexport const todoRTKquery = createApi({\n  baseQuery: axiosBaseQuery(),\n  tagTypes: ['TODO'],\n  endpoints : builder => ({\n    // getTodoRTK : builder.query({\n    //   query: () => ({url:\"/todos\", method:\"get\"}),\n    //   providesTags: ['TODO'],\n    // }),\n    getTodoRTK : builder.query({\n      query: () => ({url:\"/api/posts\", method:\"get\"}),\n      providesTags: ['TODO'],\n    }),\n    // setTodoRTK : builder.mutation({\n    //   query: (payload) => ({url:\"/todos\", method:\"post\", data:payload}),\n    //   invalidatesTags: ['TODO'],\n    // }),\n    // deleteTodoRTK : builder.mutation({\n    //   query: (payload) => ({url:`/todos/${payload}`, method:\"delete\"}),\n    //   invalidatesTags: ['TODO'],\n    // }),\n    // updateTodoRTK : builder.mutation({\n    //   query: ({todoid, data}) => ({url:`/todos/${todoid}`, method:\"patch\", data}),\n    //   invalidatesTags: ['TODO'],\n    // }),\n  })\n})\n\n// export const {useGetTodoRTKQuery, useSetTodoRTKMutation, useDeleteTodoRTKMutation, useUpdateTodoRTKMutation} = todoRTKquery;\nexport const {useGetTodoRTKQuery, useSetTodoRTKMutation, useDeleteTodoRTKMutation, useUpdateTodoRTKMutation} = todoRTKquery;\n\n\n\n/*\n  RTK Query \n    1) Redux 태생이지만, Redux와 무관하게 동작할 수도 있습니다. \n    2) [생활코딩  RTK Query](https://www.youtube.com/watch?v=pnpO3o8mLBU)\n    3) use...query 자동실행\n        - 객체를 리턴 \n        보통 isFetching & isLoading으로 확인합니다. \n    4) use...Mutation 함수호출시 서버로 데이터를 전송한다.\n        - 배열을 리턴\n        isFetching이 따로 없습니다. isLoading이 있습니다. \n    5) 서버 캐시의 패칭과 캐싱\n\n  사용하기 : Without Redux \n    1) yarn add @reduxjs/toolkit\n    2) <ApiProvider>\n        - index.js\n          <ApiProvider api={todoRTKquery}>\n            <App>\n          </ApiProvider>\n\n  사용하기 : Redux, configStore\n*/"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,SAAS,QAAQ,8BAA8B;AAExD,MAAMC,cAAc,GAAGA,CAAA,KAAM,MAAAC,IAAA,IAA+B;EAAA,IAAxB;IAACC,GAAG;IAAEC,MAAM;IAAEC;EAAI,CAAC,GAAAH,IAAA;EACrD,IAAI;IACF,MAAMI,GAAG,GAAG,MAAMP,QAAQ,CAAC;MAACK,MAAM;MAACD,GAAG;MAACE;IAAI,CAAC,CAAC;IAC7CE,OAAO,CAACC,GAAG,CAAE,GAAEJ,MAAO,EAAC,EAAEE,GAAG,CAAC;IAC7B,OAAO;MAACD,IAAI,EAAEC,GAAG,CAACD;IAAI,CAAC;EACzB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,OAAOF,OAAO,CAACC,GAAG,CAAC,IAAI,EAAEC,KAAK,CAAC;EACjC;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGV,SAAS,CAAC;EACpCW,SAAS,EAAEV,cAAc,CAAC,CAAC;EAC3BW,QAAQ,EAAE,CAAC,MAAM,CAAC;EAClBC,SAAS,EAAGC,OAAO,KAAK;IACtB;IACA;IACA;IACA;IACAC,UAAU,EAAGD,OAAO,CAACE,KAAK,CAAC;MACzBA,KAAK,EAAEA,CAAA,MAAO;QAACb,GAAG,EAAC,YAAY;QAAEC,MAAM,EAAC;MAAK,CAAC,CAAC;MAC/Ca,YAAY,EAAE,CAAC,MAAM;IACvB,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC;AACH,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAACC,kBAAkB;EAAEC,qBAAqB;EAAEC,wBAAwB;EAAEC;AAAwB,CAAC,GAAGX,YAAY;;AAI3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}