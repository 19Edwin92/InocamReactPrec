{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { instance } from \"../../api/axiosInstance\";\n\n// 비동기 ActionCreate는 만들어줘야 합니다. // ActionCreate 1개당 extraReducers 3개 만들어줘야 해요(pending, fulfilled, rejected) 프로미스죠 // 100% 성공보정이 되지 않기 때문에\nconst __getTodosThunk = createAsyncThunk(\"getTodosThunk\", async (_, thunkAPI) => {\n  try {\n    const res = await instance.get(\"/todos\");\n    return thunkAPI.fulfillWithValue(res.data);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nconst __poseTodosThunk = createAsyncThunk(\"postTodosThunk\", async (payload, thunkAPI) => {\n  try {\n    const res = await instance.post(\"/todos\", payload); // (1) 서버 업데이트\n    return thunkAPI.fulfillWithValue(res.data);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nconst __deleteTodosThunk = createAsyncThunk(\"deleteTodosThunk\", async (payload, thunkAPI) => {\n  try {\n    await instance.delete(`/todos/${payload}`); // (1) 서버 업데이트\n    return payload;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nconst __updateTodosThunk = createAsyncThunk(\"updateTodosThunk\", async (payload, thunkAPI) => {\n  try {\n    await instance.patch(`/todos/${payload.id}`, payload.content); // (1) 서버 업데이트\n    return payload;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nconst todoSlice = createSlice({\n  name: \"todoSlice\",\n  initialState: {\n    todos: [],\n    isLoading: false,\n    isError: false\n  },\n  extraReducers: {}\n  // extraReducers: (builder) => {\n  //   builder\n  //     // __getTodosThunk\n  //     .addCase(__getTodosThunk.pending, (state) => {\n  //       state.isLoading = true;\n  //       state.isError = false;\n  //     })\n  //     .addCase(__getTodosThunk.fulfilled, (state, action) => {\n  //       state.isLoading = false;\n  //       state.isError = false;\n  //       state.todos = [...action.payload];\n  //     })\n  //     .addCase(__getTodosThunk.rejected, (state) => {\n  //       state.isLoading = true;\n  //       state.isError = false;\n  //     })\n\n  //     //__poseTodosThunk\n  //     .addCase(__poseTodosThunk.pending, (state) => {\n  //       state.isLoading = true;\n  //       state.isError = false;\n  //     })\n  //     .addCase(__poseTodosThunk.fulfilled, (state, action) => {\n  //       state.isLoading = false;\n  //       state.isError = false;\n  //       state.todos = [...state.todos, action.payload]; // (2) 리렌더링 발생시키기\n  //     })\n  //     .addCase(__poseTodosThunk.rejected, (state) => {\n  //       state.isLoading = true;\n  //       state.isError = false;\n  //     })\n\n  //     // __deleteTodosThunk\n  //     .addCase(__deleteTodosThunk.pending, (state) => {\n  //       state.isLoading = true;\n  //       state.isError = false;\n  //     })\n  //     .addCase(__deleteTodosThunk.fulfilled, (state, action) => {\n  //       state.isLoading = false;\n  //       state.isError = false;\n  //       state.todos = [\n  //         ...state.todos.filter((todos) => todos.id !== action.payload),\n  //       ]; // (2) 리렌더링 발생시키기\n  //     })\n  //     .addCase(__deleteTodosThunk.rejected, (state) => {\n  //       state.isLoading = true;\n  //       state.isError = false;\n  //     })\n\n  //     // __updateTodosThunk\n  //     .addCase(__updateTodosThunk.pending, (state) => {\n  //       state.isLoading = true;\n  //       state.isError = false;\n  //     })\n  //     .addCase(__updateTodosThunk.fulfilled, (state, action) => {\n  //       state.isLoading = false;\n  //       state.isError = false;\n  //       state.todos = [\n  //         ...state.todos.map((todos) =>\n  //           todos.id === action.payload.id\n  //             ? { ...todos, title: action.payload.content.title }\n  //             : todos\n  //         ),\n  //       ]; // (2) 리렌더링 발생시키기\n  //     })\n  //     .addCase(__updateTodosThunk.rejected, (state) => {\n  //       state.isLoading = true;\n  //       state.isError = false;\n  //     });\n  // },\n});\n\nexport default todoSlice.reducer;\nexport const selecttodoSlice = state => state.todoSlice;\nexport { __getTodosThunk, __poseTodosThunk, __deleteTodosThunk, __updateTodosThunk };","map":{"version":3,"names":["createAsyncThunk","createSlice","instance","__getTodosThunk","_","thunkAPI","res","get","fulfillWithValue","data","error","rejectWithValue","__poseTodosThunk","payload","post","__deleteTodosThunk","delete","__updateTodosThunk","patch","id","content","todoSlice","name","initialState","todos","isLoading","isError","extraReducers","reducer","selecttodoSlice","state"],"sources":["/Users/edwin.youngchan.park/Documents/sparta/inocamp/03주특기/InocamReactPrec/axios-thunk/src/redux/modules/todoSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { instance } from \"../../api/axiosInstance\";\n\n// 비동기 ActionCreate는 만들어줘야 합니다. // ActionCreate 1개당 extraReducers 3개 만들어줘야 해요(pending, fulfilled, rejected) 프로미스죠 // 100% 성공보정이 되지 않기 때문에\nconst __getTodosThunk = createAsyncThunk(\n  \"getTodosThunk\",\n  async (_, thunkAPI) => {\n    try {\n      const res = await instance.get(\"/todos\");\n      return thunkAPI.fulfillWithValue(res.data);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nconst __poseTodosThunk = createAsyncThunk(\n  \"postTodosThunk\",\n  async (payload, thunkAPI) => {\n    try {\n      const res = await instance.post(\"/todos\", payload); // (1) 서버 업데이트\n      return thunkAPI.fulfillWithValue(res.data);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nconst __deleteTodosThunk = createAsyncThunk(\n  \"deleteTodosThunk\",\n  async (payload, thunkAPI) => {\n    try {\n      await instance.delete(`/todos/${payload}`); // (1) 서버 업데이트\n      return payload;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nconst __updateTodosThunk = createAsyncThunk(\n  \"updateTodosThunk\",\n  async (payload, thunkAPI) => {\n    try {\n      await instance.patch(`/todos/${payload.id}`, payload.content); // (1) 서버 업데이트\n      return payload;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nconst todoSlice = createSlice({\n  name: \"todoSlice\",\n  initialState: {\n    todos: [],\n    isLoading: false,\n    isError: false,\n  },\n  extraReducers : {}\n  // extraReducers: (builder) => {\n  //   builder\n  //     // __getTodosThunk\n  //     .addCase(__getTodosThunk.pending, (state) => {\n  //       state.isLoading = true;\n  //       state.isError = false;\n  //     })\n  //     .addCase(__getTodosThunk.fulfilled, (state, action) => {\n  //       state.isLoading = false;\n  //       state.isError = false;\n  //       state.todos = [...action.payload];\n  //     })\n  //     .addCase(__getTodosThunk.rejected, (state) => {\n  //       state.isLoading = true;\n  //       state.isError = false;\n  //     })\n\n  //     //__poseTodosThunk\n  //     .addCase(__poseTodosThunk.pending, (state) => {\n  //       state.isLoading = true;\n  //       state.isError = false;\n  //     })\n  //     .addCase(__poseTodosThunk.fulfilled, (state, action) => {\n  //       state.isLoading = false;\n  //       state.isError = false;\n  //       state.todos = [...state.todos, action.payload]; // (2) 리렌더링 발생시키기\n  //     })\n  //     .addCase(__poseTodosThunk.rejected, (state) => {\n  //       state.isLoading = true;\n  //       state.isError = false;\n  //     })\n\n  //     // __deleteTodosThunk\n  //     .addCase(__deleteTodosThunk.pending, (state) => {\n  //       state.isLoading = true;\n  //       state.isError = false;\n  //     })\n  //     .addCase(__deleteTodosThunk.fulfilled, (state, action) => {\n  //       state.isLoading = false;\n  //       state.isError = false;\n  //       state.todos = [\n  //         ...state.todos.filter((todos) => todos.id !== action.payload),\n  //       ]; // (2) 리렌더링 발생시키기\n  //     })\n  //     .addCase(__deleteTodosThunk.rejected, (state) => {\n  //       state.isLoading = true;\n  //       state.isError = false;\n  //     })\n\n  //     // __updateTodosThunk\n  //     .addCase(__updateTodosThunk.pending, (state) => {\n  //       state.isLoading = true;\n  //       state.isError = false;\n  //     })\n  //     .addCase(__updateTodosThunk.fulfilled, (state, action) => {\n  //       state.isLoading = false;\n  //       state.isError = false;\n  //       state.todos = [\n  //         ...state.todos.map((todos) =>\n  //           todos.id === action.payload.id\n  //             ? { ...todos, title: action.payload.content.title }\n  //             : todos\n  //         ),\n  //       ]; // (2) 리렌더링 발생시키기\n  //     })\n  //     .addCase(__updateTodosThunk.rejected, (state) => {\n  //       state.isLoading = true;\n  //       state.isError = false;\n  //     });\n  // },\n});\n\nexport default todoSlice.reducer;\nexport const selecttodoSlice = (state) => state.todoSlice;\nexport {\n  __getTodosThunk,\n  __poseTodosThunk,\n  __deleteTodosThunk,\n  __updateTodosThunk,\n};\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,QAAQ,QAAQ,yBAAyB;;AAElD;AACA,MAAMC,eAAe,GAAGH,gBAAgB,CACtC,eAAe,EACf,OAAOI,CAAC,EAAEC,QAAQ,KAAK;EACrB,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMJ,QAAQ,CAACK,GAAG,CAAC,QAAQ,CAAC;IACxC,OAAOF,QAAQ,CAACG,gBAAgB,CAACF,GAAG,CAACG,IAAI,CAAC;EAC5C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAOL,QAAQ,CAACM,eAAe,CAACD,KAAK,CAAC;EACxC;AACF,CACF,CAAC;AAED,MAAME,gBAAgB,GAAGZ,gBAAgB,CACvC,gBAAgB,EAChB,OAAOa,OAAO,EAAER,QAAQ,KAAK;EAC3B,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMJ,QAAQ,CAACY,IAAI,CAAC,QAAQ,EAAED,OAAO,CAAC,CAAC,CAAC;IACpD,OAAOR,QAAQ,CAACG,gBAAgB,CAACF,GAAG,CAACG,IAAI,CAAC;EAC5C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAOL,QAAQ,CAACM,eAAe,CAACD,KAAK,CAAC;EACxC;AACF,CACF,CAAC;AAED,MAAMK,kBAAkB,GAAGf,gBAAgB,CACzC,kBAAkB,EAClB,OAAOa,OAAO,EAAER,QAAQ,KAAK;EAC3B,IAAI;IACF,MAAMH,QAAQ,CAACc,MAAM,CAAE,UAASH,OAAQ,EAAC,CAAC,CAAC,CAAC;IAC5C,OAAOA,OAAO;EAChB,CAAC,CAAC,OAAOH,KAAK,EAAE;IACd,OAAOL,QAAQ,CAACM,eAAe,CAACD,KAAK,CAAC;EACxC;AACF,CACF,CAAC;AAED,MAAMO,kBAAkB,GAAGjB,gBAAgB,CACzC,kBAAkB,EAClB,OAAOa,OAAO,EAAER,QAAQ,KAAK;EAC3B,IAAI;IACF,MAAMH,QAAQ,CAACgB,KAAK,CAAE,UAASL,OAAO,CAACM,EAAG,EAAC,EAAEN,OAAO,CAACO,OAAO,CAAC,CAAC,CAAC;IAC/D,OAAOP,OAAO;EAChB,CAAC,CAAC,OAAOH,KAAK,EAAE;IACd,OAAOL,QAAQ,CAACM,eAAe,CAACD,KAAK,CAAC;EACxC;AACF,CACF,CAAC;AAED,MAAMW,SAAS,GAAGpB,WAAW,CAAC;EAC5BqB,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,SAAS,EAAE,KAAK;IAChBC,OAAO,EAAE;EACX,CAAC;EACDC,aAAa,EAAG,CAAC;EACjB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC,CAAC;;AAEF,eAAeN,SAAS,CAACO,OAAO;AAChC,OAAO,MAAMC,eAAe,GAAIC,KAAK,IAAKA,KAAK,CAACT,SAAS;AACzD,SACElB,eAAe,EACfS,gBAAgB,EAChBG,kBAAkB,EAClBE,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}