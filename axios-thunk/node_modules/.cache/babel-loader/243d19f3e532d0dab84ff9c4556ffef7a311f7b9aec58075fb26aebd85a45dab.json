{"ast":null,"code":"import { instance } from \"./axiosInstance\";\nimport { createApi } from '@reduxjs/toolkit/query/react';\nconst axiosBaseQuery = () => async () => {\n  try {\n    const res = await instance({\n      method,\n      url,\n      data\n    });\n    return {\n      data: res.data\n    };\n  } catch (error) {\n    return console.log(\"에러\", error);\n  }\n};\nexport const todoRTKquery = createApi({\n  baseQuery: axiosBaseQuery(),\n  tagTypes: ['TODO'],\n  endpoints: builder => ({\n    getTodoRTK: builder.query({\n      query: () => ({\n        url: \"/todos\",\n        method: \"get\"\n      }),\n      providesTags: ['TODO']\n    }),\n    setTodoRTK: builder.mutation({\n      query: payload => ({\n        url: \"/todos\",\n        method: \"post\",\n        data: payload\n      }),\n      invalidatesTags: ['TODO']\n    }),\n    deleteTodoRTK: builder.mutation({\n      query: payload => ({\n        url: `/todos/${payload}`,\n        method: \"delete\"\n      }),\n      invalidatesTags: ['TODO']\n    }),\n    updateTodoRTK: builder.mutation({\n      query: _ref => {\n        let {\n          todoid,\n          data\n        } = _ref;\n        return {\n          url: `/todos/${todoid}`,\n          method: \"patch\",\n          data\n        };\n      },\n      invalidatesTags: ['TODO']\n    })\n  })\n});\nexport const {\n  useGetTodoRTKQuery,\n  useSetTodoRTKMutation,\n  useDeleteTodoRTKMutation,\n  useUpdateTodoRTKMutation\n} = todoRTKquery;\n\n/*\n  RTK Query \n    1) Redux 태생이지만, Redux와 무관하게 동작할 수도 있습니다. \n    2) [생활코딩  RTK Query](https://www.youtube.com/watch?v=pnpO3o8mLBU)\n    3) use...query 자동실행\n        - 객체를 리턴 \n        보통 isFetching & isLoading으로 확인합니다. \n    4) use...Mutation 함수호출시 서버로 데이터를 전송한다.\n        - 배열을 리턴\n        isFetching이 따로 없습니다. isLoading이 있습니다. \n    5) 서버 캐시의 패칭과 캐싱\n\n  사용하기 : Without Redux \n    1) yarn add @reduxjs/toolkit\n    2) <ApiProvider>\n        - index.js\n          <ApiProvider api={todoRTKquery}>\n            <App>\n          </ApiProvider>\n\n  사용하기 : Redux, configStore\n*/","map":{"version":3,"names":["instance","createApi","axiosBaseQuery","res","method","url","data","error","console","log","todoRTKquery","baseQuery","tagTypes","endpoints","builder","getTodoRTK","query","providesTags","setTodoRTK","mutation","payload","invalidatesTags","deleteTodoRTK","updateTodoRTK","_ref","todoid","useGetTodoRTKQuery","useSetTodoRTKMutation","useDeleteTodoRTKMutation","useUpdateTodoRTKMutation"],"sources":["/Users/edwin.youngchan.park/Documents/sparta/inocamp/03주특기/InocamReactPrec/axios-thunk/src/api/todoRTKquery.js"],"sourcesContent":["import { instance } from \"./axiosInstance\";\nimport { createApi } from '@reduxjs/toolkit/query/react'\n\nconst axiosBaseQuery = () => async () => {\n  try {\n    const res = await instance({method,url,data})\n    return {data: res.data}\n  } catch (error) {\n    return console.log(\"에러\", error);\n  }\n}\n\nexport const todoRTKquery = createApi({\n  baseQuery: axiosBaseQuery(),\n  tagTypes: ['TODO'],\n  endpoints : builder => ({\n    getTodoRTK : builder.query({\n      query: () => ({url:\"/todos\", method:\"get\"}),\n      providesTags: ['TODO'],\n    }),\n    setTodoRTK : builder.mutation({\n      query: (payload) => ({url:\"/todos\", method:\"post\", data:payload}),\n      invalidatesTags: ['TODO'],\n    }),\n    deleteTodoRTK : builder.mutation({\n      query: (payload) => ({url:`/todos/${payload}`, method:\"delete\"}),\n      invalidatesTags: ['TODO'],\n    }),\n    updateTodoRTK : builder.mutation({\n      query: ({todoid, data}) => ({url:`/todos/${todoid}`, method:\"patch\", data}),\n      invalidatesTags: ['TODO'],\n    }),\n  })\n})\n\nexport const {useGetTodoRTKQuery, useSetTodoRTKMutation, useDeleteTodoRTKMutation, useUpdateTodoRTKMutation} = todoRTKquery;\n\n\n\n/*\n  RTK Query \n    1) Redux 태생이지만, Redux와 무관하게 동작할 수도 있습니다. \n    2) [생활코딩  RTK Query](https://www.youtube.com/watch?v=pnpO3o8mLBU)\n    3) use...query 자동실행\n        - 객체를 리턴 \n        보통 isFetching & isLoading으로 확인합니다. \n    4) use...Mutation 함수호출시 서버로 데이터를 전송한다.\n        - 배열을 리턴\n        isFetching이 따로 없습니다. isLoading이 있습니다. \n    5) 서버 캐시의 패칭과 캐싱\n\n  사용하기 : Without Redux \n    1) yarn add @reduxjs/toolkit\n    2) <ApiProvider>\n        - index.js\n          <ApiProvider api={todoRTKquery}>\n            <App>\n          </ApiProvider>\n\n  사용하기 : Redux, configStore\n*/"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,SAAS,QAAQ,8BAA8B;AAExD,MAAMC,cAAc,GAAGA,CAAA,KAAM,YAAY;EACvC,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMH,QAAQ,CAAC;MAACI,MAAM;MAACC,GAAG;MAACC;IAAI,CAAC,CAAC;IAC7C,OAAO;MAACA,IAAI,EAAEH,GAAG,CAACG;IAAI,CAAC;EACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAOC,OAAO,CAACC,GAAG,CAAC,IAAI,EAAEF,KAAK,CAAC;EACjC;AACF,CAAC;AAED,OAAO,MAAMG,YAAY,GAAGT,SAAS,CAAC;EACpCU,SAAS,EAAET,cAAc,CAAC,CAAC;EAC3BU,QAAQ,EAAE,CAAC,MAAM,CAAC;EAClBC,SAAS,EAAGC,OAAO,KAAK;IACtBC,UAAU,EAAGD,OAAO,CAACE,KAAK,CAAC;MACzBA,KAAK,EAAEA,CAAA,MAAO;QAACX,GAAG,EAAC,QAAQ;QAAED,MAAM,EAAC;MAAK,CAAC,CAAC;MAC3Ca,YAAY,EAAE,CAAC,MAAM;IACvB,CAAC,CAAC;IACFC,UAAU,EAAGJ,OAAO,CAACK,QAAQ,CAAC;MAC5BH,KAAK,EAAGI,OAAO,KAAM;QAACf,GAAG,EAAC,QAAQ;QAAED,MAAM,EAAC,MAAM;QAAEE,IAAI,EAACc;MAAO,CAAC,CAAC;MACjEC,eAAe,EAAE,CAAC,MAAM;IAC1B,CAAC,CAAC;IACFC,aAAa,EAAGR,OAAO,CAACK,QAAQ,CAAC;MAC/BH,KAAK,EAAGI,OAAO,KAAM;QAACf,GAAG,EAAE,UAASe,OAAQ,EAAC;QAAEhB,MAAM,EAAC;MAAQ,CAAC,CAAC;MAChEiB,eAAe,EAAE,CAAC,MAAM;IAC1B,CAAC,CAAC;IACFE,aAAa,EAAGT,OAAO,CAACK,QAAQ,CAAC;MAC/BH,KAAK,EAAEQ,IAAA;QAAA,IAAC;UAACC,MAAM;UAAEnB;QAAI,CAAC,GAAAkB,IAAA;QAAA,OAAM;UAACnB,GAAG,EAAE,UAASoB,MAAO,EAAC;UAAErB,MAAM,EAAC,OAAO;UAAEE;QAAI,CAAC;MAAA,CAAC;MAC3Ee,eAAe,EAAE,CAAC,MAAM;IAC1B,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EAACK,kBAAkB;EAAEC,qBAAqB;EAAEC,wBAAwB;EAAEC;AAAwB,CAAC,GAAGnB,YAAY;;AAI3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}